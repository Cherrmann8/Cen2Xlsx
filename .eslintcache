[{"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\index.js":"1","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\App.js":"2","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppHeader.js":"4","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppSection.js":"5","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppFooter.js":"6","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppNav.js":"7","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LoadingPage\\LoadingPage.js":"8","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\LocationPage.js":"9","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\GraphPage\\GraphPage.js":"10","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\IndicatorPage.js":"11","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\ConfirmationPage\\ConfirmationPage.js":"12","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectionTable.js":"13","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectorTable.js":"14","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\LocationLevelButtons.js":"15","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\SectionAccordion.js":"16","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\CheckBoxLabel.js":"17"},{"size":449,"mtime":1616093647498,"results":"18","hashOfConfig":"19"},{"size":4462,"mtime":1619195800153,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1616095002193,"results":"21","hashOfConfig":"19"},{"size":529,"mtime":1614807223692,"results":"22","hashOfConfig":"19"},{"size":9081,"mtime":1619196322465,"results":"23","hashOfConfig":"19"},{"size":3144,"mtime":1619195857506,"results":"24","hashOfConfig":"19"},{"size":662,"mtime":1618934184272,"results":"25","hashOfConfig":"19"},{"size":945,"mtime":1617284606343,"results":"26","hashOfConfig":"19"},{"size":7577,"mtime":1617288315744,"results":"27","hashOfConfig":"19"},{"size":334,"mtime":1617725156338,"results":"28","hashOfConfig":"19"},{"size":4749,"mtime":1618934472333,"results":"29","hashOfConfig":"19"},{"size":5503,"mtime":1619197608407,"results":"30","hashOfConfig":"19"},{"size":2322,"mtime":1617294300679,"results":"31","hashOfConfig":"19"},{"size":8285,"mtime":1618934780940,"results":"32","hashOfConfig":"19"},{"size":1316,"mtime":1614807223889,"results":"33","hashOfConfig":"19"},{"size":3889,"mtime":1618934630993,"results":"34","hashOfConfig":"19"},{"size":979,"mtime":1618934563563,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"19hsamx",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\index.js",[],["74","75","76","77","78","79"],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\App.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppHeader.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppSection.js",["80","81"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport LocationPage from \"./pages/LocationPage/LocationPage\";\r\nimport IndicatorPage from \"./pages/IndicatorPage/IndicatorPage\";\r\nimport ConfirmationPage from \"./pages/ConfirmationPage/ConfirmationPage\";\r\nimport LoadingPage from \"./pages/LoadingPage/LoadingPage\";\r\nimport GraphPage from \"./pages/GraphPage/GraphPage\";\r\nimport \"./css/AppSection.css\";\r\n\r\nconst fs = window.require(\"fs\");\r\nconst electron = window.require(\"electron\");\r\nconst { ipcRenderer } = electron;\r\n\r\nclass AppSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      locationList: [],\r\n      indicatorList: [],\r\n      fileName: \"\",\r\n      filePath: ipcRenderer.send(\"GET_DOWNLOADS_PATH\"),\r\n      progress: 0,\r\n      progressDialog: \"Starting the download...\",\r\n      showFileExistsWarning: false,\r\n    };\r\n\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.overWriteFile = this.overWriteFile.bind(this);\r\n    this.setFileName = this.setFileName.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.confirmDownload = this.confirmDownload.bind(this);\r\n    this.addLocation = this.addLocation.bind(this);\r\n    this.removeLocation = this.removeLocation.bind(this);\r\n    this.addIndicator = this.addIndicator.bind(this);\r\n    this.removeIndicator = this.removeIndicator.bind(this);\r\n    this.startPythonScript = this.startPythonScript.bind(this);\r\n\r\n    const { onPageChange } = this.props;\r\n    ipcRenderer.on(\"MESSAGE_FROM_BACKGROUND_VIA_MAIN\", (event, args) => {\r\n      console.log(args);\r\n      const tmpMessage = args.split(\" \");\r\n      const newProgress = parseFloat(tmpMessage[tmpMessage.length - 1]) * 100;\r\n      const newDialog = tmpMessage.slice(0, tmpMessage.length - 1).join(\" \");\r\n\r\n      this.setState({ progress: newProgress, progressDialog: newDialog });\r\n      if (newProgress > 100) {\r\n        onPageChange(1, true);\r\n      }\r\n    });\r\n\r\n    ipcRenderer.on(\"RETURN_DIALOG\", (event, args) => {\r\n      if (args.filePath && args.filePath.length > 0) {\r\n        this.setState({ filePath: args.filePath });\r\n      }\r\n    });\r\n\r\n    ipcRenderer.on(\"RETURN_DOWNLOADS_PATH\", (event, args) => {\r\n      this.setState({ filePath: args.downloadsPath });\r\n    });\r\n  }\r\n\r\n  handleShow() {\r\n    this.setState({ showFileExistsWarning: true });\r\n  }\r\n\r\n  handleClose() {\r\n    this.setState({ showFileExistsWarning: false });\r\n  }\r\n\r\n  setFileName(name) {\r\n    const { setInvalidFileName } = this.props;\r\n    this.setState({ fileName: name });\r\n    setInvalidFileName(false);\r\n  }\r\n\r\n  overWriteFile() {\r\n    const { onPageChange } = this.props;\r\n    this.handleClose()\r\n    onPageChange(1, false);\r\n  }\r\n\r\n  reset() {\r\n    const {\r\n      setInvalidLocations,\r\n      setInvalidIndicators,\r\n      setInvalidFileName,\r\n      setInvalidFilePath,\r\n    } = this.props;\r\n\r\n    setInvalidLocations(true);\r\n    setInvalidIndicators(true);\r\n    setInvalidFileName(false);\r\n    setInvalidFilePath(false);\r\n\r\n    this.setState({\r\n      locationList: [],\r\n      indicatorList: [],\r\n      fileName: \"\",\r\n      filePath: ipcRenderer.send(\"GET_DOWNLOADS_PATH\"),\r\n      progress: 0,\r\n      progressDialog: \"Starting your download\",\r\n    });\r\n  }\r\n\r\n  confirmDownload() {\r\n    const { setInvalidFileName } = this.props;\r\n    const { fileName, filePath } = this.state;\r\n\r\n    if (fileName.length === 0) {\r\n      setInvalidFileName(true);\r\n      return false;\r\n    }\r\n\r\n    if (fs.existsSync(`${filePath}\\\\${fileName}.xlsx`)) {\r\n      this.setState({ showFileExistsWarning: true });\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  addLocation(locationName, geographicLevel, primaryID, secondaryID) {\r\n    const { setInvalidLocations } = this.props;\r\n    const { locationList } = this.state;\r\n    const idx = locationList.findIndex(\r\n      (i) => (\r\n        i.geographicLevel === geographicLevel\r\n        && i.primaryID === primaryID\r\n        && i.secondaryID === secondaryID\r\n      ),\r\n    );\r\n    if (idx === -1) {\r\n      locationList.push({\r\n        locationName,\r\n        geographicLevel,\r\n        primaryID,\r\n        secondaryID,\r\n      });\r\n      this.setState({ locationList });\r\n    }\r\n    setInvalidLocations(false);\r\n  }\r\n\r\n  removeLocation(locationIdx) {\r\n    const { setInvalidLocations } = this.props;\r\n    const { locationList } = this.state;\r\n\r\n    if (locationList.length > locationIdx) {\r\n      locationList.splice(locationIdx, 1);\r\n      this.setState({ locationList });\r\n    }\r\n\r\n    if (locationList.length === 0) {\r\n      setInvalidLocations(true);\r\n    }\r\n  }\r\n\r\n  addIndicator(sectionIdx, tableIdx, tableName) {\r\n    const { setInvalidIndicators } = this.props;\r\n    const { indicatorList } = this.state;\r\n\r\n    const idx = indicatorList.findIndex(\r\n      (i) => i.sectionIdx === sectionIdx && i.tableIdx === tableIdx,\r\n    );\r\n\r\n    if (idx === -1) {\r\n      indicatorList.push({ tableName, sectionIdx, tableIdx });\r\n      this.setState({ indicatorList });\r\n    } else {\r\n      console.log(\"tried to add an indicator twice\");\r\n    }\r\n\r\n    console.log(\"Ind valid\");\r\n    setInvalidIndicators(false);\r\n  }\r\n\r\n  removeIndicator(sectionIdx, tableIdx) {\r\n    const { setInvalidIndicators } = this.props;\r\n    const { indicatorList } = this.state;\r\n\r\n    const idx = indicatorList.findIndex(\r\n      (i) => i.sectionIdx === sectionIdx && i.tableIdx === tableIdx,\r\n    );\r\n\r\n    if (idx !== -1) {\r\n      indicatorList.splice(idx, 1);\r\n      this.setState({ indicatorList });\r\n    }\r\n\r\n    console.log(indicatorList);\r\n\r\n    if (indicatorList.length === 0) {\r\n      console.log(\"Ind invalid\");\r\n      setInvalidIndicators(true);\r\n    }\r\n  }\r\n\r\n  startPythonScript() {\r\n    const {\r\n      locationList,\r\n      indicatorList,\r\n      fileName,\r\n      filePath,\r\n    } = this.state;\r\n\r\n    ipcRenderer.send(\"START_BACKGROUND_VIA_MAIN\", {\r\n      reportArea: locationList,\r\n      selectedIndicators: indicatorList,\r\n      options: {\r\n        outputFile: `${filePath}\\\\${fileName}.xlsx`,\r\n      },\r\n    });\r\n\r\n    // ipcRenderer.send(\"FAKE_BACKGROUND_VIA_MAIN\");\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      page,\r\n      invalidFileName,\r\n      invalidFilePath,\r\n    } = this.props;\r\n\r\n    const {\r\n      locationList,\r\n      indicatorList,\r\n      fileName,\r\n      filePath,\r\n      progress,\r\n      progressDialog,\r\n      showFileExistsWarning,\r\n    } = this.state;\r\n\r\n    let section;\r\n    if (page === 0) {\r\n      section = (\r\n        <LocationPage\r\n          locationList={locationList}\r\n          onAddLocation={this.addLocation}\r\n          onRemoveLocation={this.removeLocation}\r\n        />\r\n      );\r\n    } else if (page === 1) {\r\n      section = (\r\n        <IndicatorPage\r\n          indicatorList={indicatorList}\r\n          onAddIndicator={this.addIndicator}\r\n          onRemoveIndicator={this.removeIndicator}\r\n        />\r\n      );\r\n    } else if (page === 2) {\r\n      section = (\r\n        <ConfirmationPage\r\n          locationList={locationList}\r\n          indicatorList={indicatorList}\r\n          fileName={fileName}\r\n          filePath={filePath}\r\n          invalidFileName={invalidFileName}\r\n          invalidFilePath={invalidFilePath}\r\n          onFileNameChange={this.setFileName}\r\n        />\r\n      );\r\n    } else if (page === 3) {\r\n      section = (\r\n        <LoadingPage\r\n          progress={progress}\r\n          progressDialog={progressDialog}\r\n          onPageMount={this.startPythonScript}\r\n        />\r\n      );\r\n    } else if (page === 4) {\r\n      section = <GraphPage />;\r\n    }\r\n\r\n    const warningMessage = `The file ${filePath}\\\\${fileName}.xlsx already exists. Click Continue to overwrite the file.`\r\n\r\n    return (\r\n      <div id=\"AppSection\">\r\n        {section}\r\n        <Modal\r\n          show={showFileExistsWarning}\r\n          onHide={this.handleClose}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n          centered\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>Warning!</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            {warningMessage}\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={this.overWriteFile}>Confirm</Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAppSection.propTypes = {\r\n  page: PropTypes.number,\r\n  onPageChange: PropTypes.func,\r\n  setInvalidLocations: PropTypes.func,\r\n  setInvalidIndicators: PropTypes.func,\r\n  invalidFileName: PropTypes.bool,\r\n  setInvalidFileName: PropTypes.func,\r\n  invalidFilePath: PropTypes.bool,\r\n  setInvalidFilePath: PropTypes.func,\r\n};\r\nAppSection.defaultProps = {\r\n  page: 0,\r\n  onPageChange: null,\r\n  setInvalidLocations: null,\r\n  setInvalidIndicators: null,\r\n  invalidFileName: false,\r\n  setInvalidFileName: null,\r\n  invalidFilePath: false,\r\n  setInvalidFilePath: null,\r\n};\r\n\r\nexport default AppSection;\r\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppFooter.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppNav.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LoadingPage\\LoadingPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\LocationPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\GraphPage\\GraphPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\IndicatorPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\ConfirmationPage\\ConfirmationPage.js",["82","83"],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectionTable.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectorTable.js",["84"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nclass SelectorTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    // put each state name into the listgroup\n    this.primaryList = [];\n    this.filteredPrimaryList = [];\n    this.secondaryList = [];\n    this.filteredSecondaryList = [];\n    this.hideAll = true;\n    const { locations } = this.props;\n    let itemID = 0;\n    locations.forEach((location) => {\n      this.primaryList.push(\n        <ListGroup.Item\n          action\n          eventKey={itemID}\n          key={itemID}\n          onClick={(e) => this.onPrimaryListClick(e)}\n        >\n          {location.StateName}\n        </ListGroup.Item>,\n      );\n      itemID += 1;\n    });\n    this.filteredPrimaryList = this.primaryList;\n\n    this.formFilter = React.createRef();\n\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.handleResetClick = this.handleResetClick.bind(this);\n    this.onSecondayListClick = this.onSecondaryListClick.bind(this);\n    this.onPrimaryListClick = this.onPrimaryListClick.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions, true);\n    this.updateDimensions();\n  }\n\n  componentDidUpdate() {\n    this.updateDimensions();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions, true);\n  }\n\n  handleFilterReset() {\n    this.formFilter.current.value = \"\";\n    this.filteredPrimaryList = this.primaryList;\n  }\n\n  handleFilterChange(event) {\n    const { activeList } = this.props;\n    const filter = event.target.value.toUpperCase();\n\n    if (activeList === \"0\") {\n      this.filteredPrimaryList = [];\n      this.primaryList.forEach((location) => {\n        const item = location.props.children.toUpperCase();\n        if (item.indexOf(filter) >= 0) {\n          this.filteredPrimaryList.push(location);\n        }\n      });\n    } else {\n      this.filteredSecondaryList = [];\n      this.secondaryList.forEach((location) => {\n        const item = location.props.children.toUpperCase();\n        if (item.indexOf(filter) >= 0) {\n          this.filteredSecondaryList.push(location);\n        }\n      });\n    }\n    this.forceUpdate();\n  }\n\n  handleResetClick() {\n    const { onCloseSecondary } = this.props;\n    this.handleFilterReset();\n    onCloseSecondary();\n  }\n\n  onSecondaryListClick(event) {\n    const {\n      level,\n      setCountyIdx,\n      setPlaceIdx,\n      onDoubleClick,\n    } = this.props;\n\n    const tmpSecondaryIdx = event.target.attributes[0].value;\n\n    if (level === \"County\") {\n      setCountyIdx(tmpSecondaryIdx);\n    } else if (level === \"Place\") {\n      setPlaceIdx(tmpSecondaryIdx);\n    }\n\n    if (event.detail === 2) {\n      onDoubleClick();\n    }\n  }\n\n  onPrimaryListClick(event) {\n    const tmpStateIdx = event.target.attributes[0].value;\n    const {\n      level,\n      onOpenSecondary,\n      setStateIdx,\n      onDoubleClick,\n    } = this.props;\n\n    // set the stateIdx\n    setStateIdx(tmpStateIdx);\n\n    if (level !== \"State\") {\n      const { locations } = this.props;\n\n      // change the primaryList title\n      onOpenSecondary(locations[tmpStateIdx].StateName);\n      this.handleFilterReset();\n\n      // create secondaryList\n      this.secondaryList = [];\n      let tmpSecondary = null;\n      let itemID = 0;\n      if (level === \"County\") {\n        tmpSecondary = locations[tmpStateIdx].Counties;\n        tmpSecondary.forEach((secondary) => {\n          this.secondaryList.push(\n            <ListGroup.Item\n              action\n              eventKey={itemID}\n              key={itemID}\n              onClick={(e) => this.onSecondaryListClick(e)}\n            >\n              {secondary.CountyName}\n            </ListGroup.Item>,\n          );\n          itemID += 1;\n        });\n      } else if (level === \"Place\") {\n        tmpSecondary = locations[tmpStateIdx].Places;\n        tmpSecondary.forEach((secondary) => {\n          this.secondaryList.push(\n            <ListGroup.Item\n              action\n              eventKey={itemID}\n              key={itemID}\n              onClick={(e) => this.onSecondaryListClick(e)}\n            >\n              {secondary.PlaceName}\n            </ListGroup.Item>,\n          );\n          itemID += 1;\n        });\n      }\n      this.filteredSecondaryList = this.secondaryList;\n    } else {\n      if (event.detail === 2) {\n        onDoubleClick();\n      }\n    }\n  }\n\n  updateDimensions() {\n    const { level } = this.props;\n\n    const SelectorHeader = document.getElementById(\"SelectorAccordionHeader\").clientHeight;\n    const SelectionHeader = document.getElementById(\"SelectionAccordionHeader\").clientHeight;\n    const SelectionBody = document.getElementById(\"SelectionList\").clientHeight;\n\n    const targetHeight = (SelectionHeader + SelectionBody) - SelectorHeader;\n    document.getElementById(\"SelectorList\").style.height = `${targetHeight}px`;\n  }\n\n  render() {\n    // build the selectorTable\n    const {\n      activeList,\n      primaryTitle,\n      secondaryTitle,\n      activePrimaryItem,\n      activeSecondaryItem,\n    } = this.props;\n\n    console.log(\"rendering selector table\");\n\n    const resetStateButton = (\n      <Button id=\"ResetStateButton\" onClick={this.handleResetClick}>\n        Reset\n      </Button>\n    );\n\n    let listGroupItems;\n    let activeItem;\n    if (activeList === \"0\") {\n      listGroupItems = this.filteredPrimaryList;\n      activeItem = activePrimaryItem;\n    } else {\n      listGroupItems = this.filteredSecondaryList;\n      activeItem = activeSecondaryItem;\n    }\n\n    return (\n      <div id=\"SelectorTable\">\n        <Accordion defaultActiveKey=\"0\" activeKey=\"0\">\n          <Card>\n            <Card.Header id=\"SelectorAccordionHeader\">\n              <Accordion.Toggle as=\"span\" eventKey=\"0\">\n                <div id=\"SelectorHeader\">\n                  <div id=\"SelectorPrimaryHeader\">\n                    {primaryTitle}\n                    {activeList !== \"0\" ? resetStateButton : null}\n                  </div>\n                  {activeList !== \"0\" ? secondaryTitle : null}\n                  <FormControl\n                    ref={this.formFilter}\n                    onKeyUp={(e) => this.handleFilterChange(e)}\n                    placeholder=\"filter...\"\n                  />\n                </div>\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body id=\"SelectorList\">\n                <ListGroup variant=\"flush\" activeKey={activeItem}>\n                  {listGroupItems}\n                </ListGroup>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </div>\n    );\n  }\n}\n\nSelectorTable.propTypes = {\n  level: PropTypes.string,\n  activeList: PropTypes.string,\n  primaryTitle: PropTypes.string,\n  secondaryTitle: PropTypes.string,\n  onOpenSecondary: PropTypes.func,\n  onCloseSecondary: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  activePrimaryItem: PropTypes.string,\n  activeSecondaryItem: PropTypes.string,\n  setStateIdx: PropTypes.func,\n  setCountyIdx: PropTypes.func,\n  setPlaceIdx: PropTypes.func,\n  locations: PropTypes.arrayOf(\n    PropTypes.shape({\n      StateName: PropTypes.string,\n      StateID: PropTypes.string,\n      Counties: PropTypes.arrayOf(\n        PropTypes.shape({\n          CountyName: PropTypes.string,\n          CountyID: PropTypes.string,\n        }),\n      ),\n      Places: PropTypes.arrayOf(\n        PropTypes.shape({\n          PlaceName: PropTypes.string,\n          PlaceID: PropTypes.string,\n        }),\n      ),\n    }),\n  ),\n};\nSelectorTable.defaultProps = {\n  level: \"State\",\n  activeList: \"0\",\n  primaryTitle: \"Select a state\",\n  secondaryTitle: \"Select a state above\",\n  onOpenSecondary: null,\n  onCloseSecondary: null,\n  onDoubleClick: null,\n  activePrimaryItem: null,\n  activeSecondaryItem: null,\n  setStateIdx: null,\n  setCountyIdx: null,\n  setPlaceIdx: null,\n  locations: null,\n};\n\nexport default SelectorTable;\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\LocationLevelButtons.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\SectionAccordion.js",[],["85","86","87","88","89","90"],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\CheckBoxLabel.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":81,"column":23,"nodeType":"105","messageId":"106","endLine":82,"endColumn":1,"fix":"107"},{"ruleId":"103","severity":1,"message":"104","line":278,"column":122,"nodeType":"108","messageId":"106","endLine":279,"endColumn":1,"fix":"109"},{"ruleId":"110","severity":1,"message":"111","line":55,"column":13,"nodeType":"112","messageId":"113","endLine":55,"endColumn":25},{"ruleId":"110","severity":1,"message":"114","line":64,"column":7,"nodeType":"112","messageId":"113","endLine":64,"endColumn":22},{"ruleId":"110","severity":1,"message":"115","line":178,"column":13,"nodeType":"112","messageId":"113","endLine":178,"endColumn":18},{"ruleId":"91","replacedBy":"116"},{"ruleId":"93","replacedBy":"117"},{"ruleId":"95","replacedBy":"118"},{"ruleId":"97","replacedBy":"119"},{"ruleId":"99","replacedBy":"120"},{"ruleId":"101","replacedBy":"121"},"global-require",[],"lines-around-directive",["122"],"no-spaced-func",["123"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"semi","Missing semicolon.","ExpressionStatement","missingSemi",{"range":"124","text":"125"},"VariableDeclaration",{"range":"126","text":"125"},"no-unused-vars","'locationList' is assigned a value but never used.","Identifier","unusedVar","'invalidFilePath' is assigned a value but never used.","'level' is assigned a value but never used.",[],["122"],["123"],[],[],[],"padding-line-between-statements","func-call-spacing",[2810,2810],";",[7760,7760]]