[{"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\index.js":"1","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\App.js":"2","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppHeader.js":"4","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppSection.js":"5","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppFooter.js":"6","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppNav.js":"7","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\LocationPage.js":"8","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\IndicatorPage.js":"9","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\ConfirmationPage\\ConfirmationPage.js":"10","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\GraphPage\\GraphPage.js":"11","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LoadingPage\\LoadingPage.js":"12","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\LocationLevelButtons.js":"13","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectorTable.js":"14","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectionTable.js":"15"},{"size":452,"mtime":1613506856113,"results":"16","hashOfConfig":"17"},{"size":1149,"mtime":1613584608462,"results":"18","hashOfConfig":"17"},{"size":367,"mtime":1612243856186,"results":"19","hashOfConfig":"17"},{"size":524,"mtime":1612408366408,"results":"20","hashOfConfig":"17"},{"size":3364,"mtime":1613586741862,"results":"21","hashOfConfig":"17"},{"size":1363,"mtime":1613333873889,"results":"22","hashOfConfig":"17"},{"size":615,"mtime":1612410297865,"results":"23","hashOfConfig":"17"},{"size":4209,"mtime":1613494082938,"results":"24","hashOfConfig":"17"},{"size":3862,"mtime":1613584891321,"results":"25","hashOfConfig":"17"},{"size":2239,"mtime":1613494077217,"results":"26","hashOfConfig":"17"},{"size":261,"mtime":1612907038525,"results":"27","hashOfConfig":"17"},{"size":1073,"mtime":1613586350239,"results":"28","hashOfConfig":"17"},{"size":1229,"mtime":1613010982796,"results":"29","hashOfConfig":"17"},{"size":5372,"mtime":1613432252644,"results":"30","hashOfConfig":"17"},{"size":3247,"mtime":1613490921188,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"5t6lra",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"52","usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\index.js",["67"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals()\n",["68","69","70","71","72","73"],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\App.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppHeader.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppSection.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppFooter.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppNav.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\LocationPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\IndicatorPage.js",["74","75","76"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from 'react-bootstrap/Button'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport dataTables from '../../../assets/data/dataTableDescriptions.json'\nimport '../../css/IndicatorPage.css'\n\nconst electron = window.require('electron')\nconst { ipcRenderer } = electron\n\nclass IndicatorPage extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n    }\n\n    this.indicatorSections = []\n    this.sectionCheckBoxes = {}\n    this.checkBoxInfo = []\n\n    this.onCheckBoxClicked = this.onCheckBoxClicked.bind(this)\n\n    // build the indicatorAccordion\n    this.buildIndicatorAccordion()\n  }\n\n  componentDidMount() {\n    const { indicatorList } = this.props\n    indicatorList.forEach((indicator) => {\n      const index = indicator.indicatorIdx.toString()\n      document.getElementById(index).checked = true\n      this.checkBoxInfo[index].checked = true\n    })\n  }\n\n  onCheckBoxClicked(event) {\n    const id = parseInt(event.target.id, 10)\n    const { sid, tid } = this.checkBoxInfo[id]\n    const { onAddIndicator, onRemoveIndicator } = this.props\n\n    this.checkBoxInfo[id].checked = !this.checkBoxInfo[id].checked\n    document.getElementById(event.target.id).checked = this.checkBoxInfo[id].checked\n\n    // console.log(`${id}, ${sid}, ${tid}`)\n\n    if (this.checkBoxInfo[id].checked) {\n      // console.log('add')\n      onAddIndicator(id, sid, tid)\n    } else {\n      // console.log('remove')\n      onRemoveIndicator(id, sid, tid)\n    }\n  }\n\n  buildIndicatorAccordion() {\n    // build the indicator accordion\n    let i\n    let j\n    let checkboxID = 0\n\n    for (i = 0; i < dataTables.length; i += 1) {\n      const indicatorSection = dataTables[i]\n      this.sectionCheckBoxes[i] = []\n\n      // build this sections checkboxes\n      for (j = 0; j < indicatorSection.Indicators.length; j += 1) {\n        const indicator = indicatorSection.Indicators[j]\n\n        let cbInfo = {}\n        cbInfo.name = indicator.TableName\n        cbInfo.id = checkboxID.toString()\n        cbInfo.sid = i\n        cbInfo.tid = j\n        cbInfo.checked = false\n        this.checkBoxInfo.push(cbInfo)\n\n        this.sectionCheckBoxes[i].push(\n          <div>\n            <input\n              type=\"checkbox\"\n              name={this.checkBoxInfo[checkboxID].name}\n              id={this.checkBoxInfo[checkboxID].id}\n              onChange={(e) => this.onCheckBoxClicked(e)}\n            />\n            <label htmlFor={this.checkBoxInfo[checkboxID].id}>\n              {this.checkBoxInfo[checkboxID].name}\n            </label>\n            <br />\n          </div>,\n        )\n\n        checkboxID += 1\n      }\n\n      // build this sections accordion\n      this.indicatorSections.push(\n        <Accordion defaultActiveKey=\"0\">\n          <Card>\n            <Card.Header id=\"indicatorHeader\">\n              <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\n                {indicatorSection.IndicatorSectionName}\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body>\n                {this.sectionCheckBoxes[i]}\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>,\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"IndicatorAccordion\">\n        {this.indicatorSections}\n      </div>\n    )\n  }\n}\n\nIndicatorPage.propTypes = {\n  indicatorList: PropTypes.arrayOf(\n    PropTypes.shape({\n      indicatorIdx: PropTypes.number,\n      sectionIdx: PropTypes.number,\n      tableIdx: PropTypes.number,\n    }),\n  ),\n  onAddIndicator: PropTypes.func,\n  onRemoveIndicator: PropTypes.func,\n}\nIndicatorPage.defaultProps = {\n  indicatorList: null,\n  onAddIndicator: null,\n  onRemoveIndicator: null,\n}\n\nexport default IndicatorPage\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\ConfirmationPage\\ConfirmationPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\GraphPage\\GraphPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LoadingPage\\LoadingPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\LocationLevelButtons.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectorTable.js",["77"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nclass SelectorTable extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n    }\n\n    // put each state name into the listgroup\n    this.stateList = []\n    this.secondariesList = []\n    const { locations } = this.props\n    let itemID = 0\n    locations.forEach((location) => {\n      this.stateList.push(\n        <ListGroup.Item\n          action\n          eventKey={itemID}\n          key={itemID}\n          onClick={(e) => this.onStateListClick(e)}\n        >\n          {location.StateName}\n        </ListGroup.Item>,\n      )\n      itemID += 1\n    })\n\n    this.onSecondariesListClick = this.onSecondariesListClick.bind(this)\n    this.onStateListClick = this.onStateListClick.bind(this)\n    this.buildSelectorTable = this.buildSelectorTable.bind(this)\n  }\n\n  onSecondariesListClick(event) {\n    const {\n      level,\n      setCountyIdx,\n      setPlaceIdx,\n    } = this.props\n\n    const tmpSecondaryIdx = event.target.attributes[0].value\n    // console.log(tmpSecondaryIdx)\n\n    if (level === 'County') {\n      setCountyIdx(tmpSecondaryIdx)\n    } else if (level === 'Place') {\n      setPlaceIdx(tmpSecondaryIdx)\n    }\n  }\n\n  onStateListClick(event) {\n    const tmpStateIdx = event.target.attributes[0].value\n    const {\n      level,\n      onOpenSecondary,\n      setStateIdx,\n    } = this.props\n\n    // set the stateIdx\n    setStateIdx(tmpStateIdx)\n\n    if (level !== 'State') {\n      const { locations } = this.props\n\n      // change the stateList title\n      onOpenSecondary(locations[tmpStateIdx].StateName)\n\n      // create secondaryList\n      this.secondariesList = []\n      let tmpSecondaries = null\n      let itemID = 0\n      if (level === 'County') {\n        tmpSecondaries = locations[tmpStateIdx].Counties\n        tmpSecondaries.forEach((secondary) => {\n          this.secondariesList.push(\n            <ListGroup.Item\n              action\n              eventKey={itemID}\n              key={itemID}\n              onClick={(e) => this.onSecondariesListClick(e)}\n            >\n              {secondary.CountyName}\n            </ListGroup.Item>,\n          )\n          itemID += 1\n        })\n      } else if (level === 'Place') {\n        tmpSecondaries = locations[tmpStateIdx].Places\n        tmpSecondaries.forEach((secondary) => {\n          this.secondariesList.push(\n            <ListGroup.Item\n              action\n              eventKey={itemID}\n              key={itemID}\n              onClick={(e) => this.onSecondariesListClick(e)}\n            >\n              {secondary.PlaceName}\n            </ListGroup.Item>,\n          )\n          itemID += 1\n        })\n      }\n      // console.log(tmpSecondaries)\n    }\n  }\n\n  buildSelectorTable() {\n    console.log('Building selectorTable')\n\n    const {\n      level,\n      activeCard,\n      stateListTitle,\n    } = this.props\n\n    let secondaryCard = null\n    if (level !== 'State') {\n      secondaryCard = (\n        <Card>\n          <Card.Header>\n            <Accordion.Toggle as=\"h6\" eventKey=\"1\">\n              Select a state above\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"1\">\n            <Card.Body id=\"SelectorList\">\n              <ListGroup variant=\"flush\">\n                {this.secondariesList}\n              </ListGroup>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      )\n    }\n\n    return (\n      <Accordion defaultActiveKey={activeCard} activeKey={activeCard}>\n        <Card>\n          <Card.Header>\n            <Accordion.Toggle as=\"h6\" eventKey=\"0\">\n              {stateListTitle}\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"0\">\n            <Card.Body id=\"SelectorList\">\n              <ListGroup variant=\"flush\">\n                {this.stateList}\n              </ListGroup>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n        {secondaryCard}\n      </Accordion>\n    )\n  }\n\n  render() {\n    // build the selectorTable\n    const selectorTable = this.buildSelectorTable()\n\n    return (\n      <div id=\"SelectorTable\">\n        {selectorTable}\n      </div>\n    )\n  }\n}\n\nSelectorTable.propTypes = {\n  level: PropTypes.string,\n  // activeList: PropTypes.string,\n  activeCard: PropTypes.string,\n  stateListTitle: PropTypes.string,\n  onOpenSecondary: PropTypes.func,\n  setStateIdx: PropTypes.func,\n  setCountyIdx: PropTypes.func,\n  setPlaceIdx: PropTypes.func,\n  locations: PropTypes.arrayOf(\n    PropTypes.shape({\n      StateName: PropTypes.string,\n      StateID: PropTypes.string,\n      Counties: PropTypes.arrayOf(\n        PropTypes.shape({\n          CountyName: PropTypes.string,\n          CountyID: PropTypes.string,\n        }),\n      ),\n      Places: PropTypes.arrayOf(\n        PropTypes.shape({\n          PlaceName: PropTypes.string,\n          PlaceID: PropTypes.string,\n        }),\n      ),\n    }),\n  ),\n}\nSelectorTable.defaultProps = {\n  level: 'State',\n  // activeList: '0',\n  activeCard: '0',\n  stateListTitle: 'Select a state',\n  onOpenSecondary: null,\n  setStateIdx: null,\n  setCountyIdx: null,\n  setPlaceIdx: null,\n  locations: null,\n}\n\nexport default SelectorTable\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectionTable.js",[],["78","79","80","81","82","83"],{"ruleId":"84","severity":1,"message":"85","line":5,"column":8,"nodeType":"86","messageId":"87","endLine":5,"endColumn":23},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"84","severity":1,"message":"100","line":3,"column":8,"nodeType":"86","messageId":"87","endLine":3,"endColumn":14},{"ruleId":"84","severity":1,"message":"101","line":10,"column":9,"nodeType":"86","messageId":"87","endLine":10,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":70,"column":13,"nodeType":"86","messageId":"104","endLine":70,"endColumn":19,"fix":"105"},{"ruleId":"84","severity":1,"message":"100","line":5,"column":8,"nodeType":"86","messageId":"87","endLine":5,"endColumn":14},{"ruleId":"88","replacedBy":"106"},{"ruleId":"90","replacedBy":"107"},{"ruleId":"92","replacedBy":"108"},{"ruleId":"94","replacedBy":"109"},{"ruleId":"96","replacedBy":"110"},{"ruleId":"98","replacedBy":"111"},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","global-require",[],"lines-around-directive",["112"],"no-spaced-func",["113"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"'Button' is defined but never used.","'ipcRenderer' is assigned a value but never used.","prefer-const","'cbInfo' is never reassigned. Use 'const' instead.","useConst",{"range":"114","text":"115"},[],["112"],["113"],[],[],[],"padding-line-between-statements","func-call-spacing",[1995,2010],"const cbInfo = {}"]