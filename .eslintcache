[{"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\index.js":"1","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\App.js":"2","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppHeader.js":"4","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppSection.js":"5","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppFooter.js":"6","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppNav.js":"7","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\LocationPage.js":"8","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\IndicatorPage.js":"9","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\ConfirmationPage\\ConfirmationPage.js":"10","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\GraphPage\\GraphPage.js":"11","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LoadingPage\\LoadingPage.js":"12","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\LocationLevelButtons.js":"13","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectorTable.js":"14","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectionTable.js":"15"},{"size":451,"mtime":1614807223948,"results":"16","hashOfConfig":"17"},{"size":1165,"mtime":1614807220991,"results":"18","hashOfConfig":"17"},{"size":364,"mtime":1614807223959,"results":"19","hashOfConfig":"17"},{"size":529,"mtime":1614807223692,"results":"20","hashOfConfig":"17"},{"size":4049,"mtime":1614880675469,"results":"21","hashOfConfig":"17"},{"size":1538,"mtime":1614807223684,"results":"22","hashOfConfig":"17"},{"size":606,"mtime":1614807223701,"results":"23","hashOfConfig":"17"},{"size":5141,"mtime":1614807223875,"results":"24","hashOfConfig":"17"},{"size":3780,"mtime":1614880675469,"results":"25","hashOfConfig":"17"},{"size":2189,"mtime":1614807223798,"results":"26","hashOfConfig":"17"},{"size":327,"mtime":1614807223806,"results":"27","hashOfConfig":"17"},{"size":777,"mtime":1614880675473,"results":"28","hashOfConfig":"17"},{"size":1316,"mtime":1614807223889,"results":"29","hashOfConfig":"17"},{"size":5209,"mtime":1614807223932,"results":"30","hashOfConfig":"17"},{"size":2581,"mtime":1614807223908,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"5l4o2q",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"40","usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"45","usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":"52","usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":"55","usedDeprecatedRules":"35"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":"58","usedDeprecatedRules":"35"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":6,"source":"67","usedDeprecatedRules":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":5,"source":"70","usedDeprecatedRules":"71"},"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\index.js",["72"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals()\n",["73","74","75","76","77","78"],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\App.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\reportWebVitals.js",["79","80"],"const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppHeader.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppSection.js",["81","82"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport LocationPage from \"./pages/LocationPage/LocationPage\";\r\nimport IndicatorPage from \"./pages/IndicatorPage/IndicatorPage\";\r\nimport ConfirmationPage from \"./pages/ConfirmationPage/ConfirmationPage\";\r\nimport LoadingPage from \"./pages/LoadingPage/LoadingPage\";\r\nimport GraphPage from \"./pages/GraphPage/GraphPage\";\r\n\r\nconst electron = require(\"electron\");\r\n\r\nconst { ipcRenderer } = electron;\r\n\r\nclass AppSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      locationList: [],\r\n      indicatorList: [],\r\n      progress: 0,\r\n    };\r\n\r\n    this.addLocation = this.addLocation.bind(this);\r\n    this.removeLocation = this.removeLocation.bind(this);\r\n    this.addIndicator = this.addIndicator.bind(this);\r\n    this.removeIndicator = this.removeIndicator.bind(this);\r\n    this.startPythonScript = this.startPythonScript.bind(this);\r\n\r\n    const { onPageChange } = this.props;\r\n\r\n    ipcRenderer.on(\"MESSAGE_FROM_BACKGROUND_VIA_MAIN\", (event, args) => {\r\n      console.log(args);\r\n      const newProgress = parseFloat(args) * 100;\r\n      console.log(newProgress);\r\n      this.setState({ progress: newProgress });\r\n      if (newProgress >= 100) {\r\n        onPageChange(1);\r\n      }\r\n    });\r\n  }\r\n\r\n  addLocation(locationName, geographicLevel, primaryID, secondaryID) {\r\n    const { locationList } = this.state;\r\n    const idx = locationList.findIndex(\r\n      (i) => (\r\n        i.geographicLevel === geographicLevel\r\n        && i.primaryID === primaryID\r\n        && i.secondaryID === secondaryID\r\n      )\r\n    );\r\n    if (idx === -1) {\r\n      locationList.push({\r\n        locationName,\r\n        geographicLevel,\r\n        primaryID,\r\n        secondaryID,\r\n      });\r\n      this.setState({ locationList });\r\n    }\r\n  }\r\n\r\n  removeLocation(locationIdx) {\r\n    const { locationList } = this.state;\r\n\r\n    if (locationList.length > locationIdx) {\r\n      locationList.splice(locationIdx, 1);\r\n      this.setState({ locationList });\r\n    }\r\n  }\r\n\r\n  addIndicator(sectionIdx, tableIdx) {\r\n    const { indicatorList } = this.state;\r\n    indicatorList.push({ sectionIdx, tableIdx });\r\n    this.setState({ indicatorList });\r\n    console.log(indicatorList);\r\n  }\r\n\r\n  removeIndicator(sectionIdx, tableIdx) {\r\n    const { indicatorList } = this.state;\r\n    const idx = indicatorList.findIndex(\r\n      (i) => i.sectionIdx === sectionIdx && i.tableIdx === tableIdx\r\n    );\r\n    if (idx !== -1) {\r\n      indicatorList.splice(idx, 1);\r\n      this.setState({ indicatorList });\r\n    }\r\n\r\n    console.log(indicatorList);\r\n  }\r\n\r\n  startPythonScript() {\r\n    const { locationList, indicatorList } = this.state;\r\n\r\n    ipcRenderer.send(\"START_BACKGROUND_VIA_MAIN\", {\r\n      reportArea: locationList,\r\n      selectedIndicators: indicatorList,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { page } = this.props;\r\n    const { locationList, indicatorList, progress } = this.state;\r\n\r\n    let section;\r\n    if (page === 0) {\r\n      section = (\r\n        <LocationPage\r\n          locationList={locationList}\r\n          onAddLocation={this.addLocation}\r\n          onRemoveLocation={this.removeLocation}\r\n        />\r\n      );\r\n    } else if (page === 1) {\r\n      section = (\r\n        <IndicatorPage\r\n          indicatorList={indicatorList}\r\n          onAddIndicator={this.addIndicator}\r\n          onRemoveIndicator={this.removeIndicator}\r\n        />\r\n      );\r\n    } else if (page === 2) {\r\n      section = (\r\n        <ConfirmationPage\r\n          locationList={locationList}\r\n          indicatorList={indicatorList}\r\n        />\r\n      );\r\n    } else if (page === 3) {\r\n      section = (\r\n        <LoadingPage progress={progress} onPageMount={this.startPythonScript} />\r\n      );\r\n    } else if (page === 4) {\r\n      section = <GraphPage />;\r\n    }\r\n    return <>{section}</>;\r\n  }\r\n}\r\n\r\nAppSection.propTypes = {\r\n  page: PropTypes.number,\r\n  onPageChange: PropTypes.func,\r\n};\r\nAppSection.defaultProps = {\r\n  page: 0,\r\n  onPageChange: null,\r\n};\r\n\r\nexport default AppSection;\r\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppFooter.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppNav.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\LocationPage.js",["83","84","85","86","87","88"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport LocationLevelButtons from \"./subcomponents/LocationLevelButtons\";\nimport SelectorTable from \"./subcomponents/SelectorTable\";\nimport SelectionTable from \"./subcomponents/SelectionTable\";\nimport locations from \"../../../assets/data/geographies.json\";\nimport \"../../css/LocationPage.css\";\n\nclass LocationPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      level: \"State\",\n      activeCard: \"0\",\n      stateListTitle: \"Select a state:\",\n      stateIdx: -1,\n      countyIdx: -1,\n      placeIdx: -1,\n      locationIdx: -1,\n    };\n\n    this.selectionTable = React.createRef();\n\n    this.handleLevelChange = this.handleLevelChange.bind(this);\n    this.handleOpenSecondary = this.handleOpenSecondary.bind(this);\n    this.handleAddClick = this.handleAddClick.bind(this);\n    this.handleRemoveClick = this.handleRemoveClick.bind(this);\n    this.setStateIdx = this.setStateIdx.bind(this);\n    this.setCountyIdx = this.setCountyIdx.bind(this);\n    this.setPlaceIdx = this.setPlaceIdx.bind(this);\n    this.setLocationIdx = this.setLocationIdx.bind(this);\n  }\n\n  componentDidMount() {\n    // rebuild the selectionList in SelectionTable when this page is mounted\n    this.selectionTable.current.buildSelectionTable();\n    this.selectionTable.current.forceUpdate();\n  }\n\n  handleLevelChange(newLevel) {\n    this.setState({\n      level: newLevel,\n      activeCard: \"0\",\n      stateListTitle: \"Select a state:\",\n      stateIdx: -1,\n      countyIdx: -1,\n      placeIdx: -1,\n    });\n  }\n\n  handleOpenSecondary(stateName) {\n    this.setState({\n      activeCard: \"1\",\n      stateListTitle: `State selected: ${stateName}`,\n    });\n  }\n\n  handleAddClick() {\n    const { onAddLocation } = this.props;\n    const { level, stateIdx, countyIdx, placeIdx } = this.state;\n\n    if (stateIdx !== -1) {\n      if (level === \"State\") {\n        onAddLocation(\n          locations[stateIdx].StateName,\n          \"0\",\n          locations[stateIdx].StateID,\n          \"-1\"\n        );\n        this.selectionTable.current.buildSelectionTable();\n      } else if (countyIdx !== -1 && level === \"County\") {\n        onAddLocation(\n          locations[stateIdx].Counties[countyIdx].CountyName,\n          \"1\",\n          locations[stateIdx].StateID,\n          locations[stateIdx].Counties[countyIdx].CountyID\n        );\n        this.selectionTable.current.buildSelectionTable();\n      } else if (placeIdx !== -1 && level === \"Place\") {\n        onAddLocation(\n          locations[stateIdx].Places[placeIdx].PlaceName,\n          \"2\",\n          locations[stateIdx].StateID,\n          locations[stateIdx].Places[placeIdx].PlaceID\n        );\n        this.selectionTable.current.buildSelectionTable();\n      }\n    }\n  }\n\n  handleRemoveClick() {\n    console.log(\"LocationPage  rc\");\n    console.log(document.getElementsByClassName(\"active\"));\n    const { onRemoveLocation } = this.props;\n    const { locationIdx } = this.state;\n\n    if (locationIdx !== -1) {\n      onRemoveLocation(locationIdx);\n      this.selectionTable.current.buildSelectionTable();\n    }\n  }\n\n  setStateIdx(newIdx) {\n    this.setState({ stateIdx: parseInt(newIdx, 10) });\n  }\n\n  setCountyIdx(newIdx) {\n    this.setState({ countyIdx: parseInt(newIdx, 10) });\n  }\n\n  setPlaceIdx(newIdx) {\n    this.setState({ placeIdx: parseInt(newIdx, 10) });\n  }\n\n  setLocationIdx(newIdx) {\n    this.setState({ locationIdx: newIdx });\n  }\n\n  render() {\n    const { locationList } = this.props;\n    const { level, activeCard, stateListTitle } = this.state;\n\n    return (\n      <div className=\"LocationPage\">\n        <LocationLevelButtons onLevelChange={this.handleLevelChange} />\n        <div className=\"LocationTables\">\n          <SelectorTable\n            level={level}\n            activeCard={activeCard}\n            stateListTitle={stateListTitle}\n            onOpenSecondary={this.handleOpenSecondary}\n            setStateIdx={this.setStateIdx}\n            setCountyIdx={this.setCountyIdx}\n            setPlaceIdx={this.setPlaceIdx}\n            locations={locations}\n          />\n          <div className=\"LocationTableButtons\">\n            <Button id=\"AddLocationButtton\" onClick={this.handleAddClick}>\n              Add\n            </Button>\n            <Button id=\"RemoveLocationButtton\" onClick={this.handleRemoveClick}>\n              Remove\n            </Button>\n          </div>\n          <SelectionTable\n            ref={this.selectionTable}\n            locationList={locationList}\n            setLocationIdx={this.setLocationIdx}\n            locations={locations}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nLocationPage.propTypes = {\n  locationList: PropTypes.arrayOf(\n    PropTypes.shape({\n      locationName: PropTypes.string,\n      geographicLevel: PropTypes.string,\n      primaryID: PropTypes.string,\n      secondaryID: PropTypes.string,\n    })\n  ),\n  onAddLocation: PropTypes.func,\n  onRemoveLocation: PropTypes.func,\n};\nLocationPage.defaultProps = {\n  locationList: null,\n  onAddLocation: null,\n  onRemoveLocation: null,\n};\n\nexport default LocationPage;\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\IndicatorPage.js",["89","90","91","92","93"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport dataTables from \"../../../assets/data/customTables.json\";\r\nimport \"../../css/IndicatorPage.css\";\r\n\r\nclass IndicatorPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n\r\n    this.indicatorSections = [];\r\n    this.sectionCheckBoxes = {};\r\n    this.checkBoxInfo = [];\r\n\r\n    this.onCheckBoxClicked = this.onCheckBoxClicked.bind(this);\r\n\r\n    // build the indicatorAccordion\r\n    this.buildIndicatorAccordion();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { indicatorList } = this.props;\r\n    indicatorList.forEach((indicator) => {\r\n      const index = indicator.indicatorIdx.toString();\r\n      document.getElementById(index).checked = true;\r\n      this.checkBoxInfo[index].checked = true;\r\n    });\r\n  }\r\n\r\n  onCheckBoxClicked(event) {\r\n    const id = parseInt(event.target.id, 10);\r\n    const { sid, tid } = this.checkBoxInfo[id];\r\n    const { onAddIndicator, onRemoveIndicator } = this.props;\r\n\r\n    this.checkBoxInfo[id].checked = !this.checkBoxInfo[id].checked;\r\n    document.getElementById(event.target.id).checked = this.checkBoxInfo[\r\n      id\r\n    ].checked;\r\n\r\n    if (this.checkBoxInfo[id].checked) {\r\n      onAddIndicator(sid, tid);\r\n    } else {\r\n      onRemoveIndicator(sid, tid);\r\n    }\r\n  }\r\n\r\n  buildIndicatorAccordion() {\r\n    // build the indicator accordion\r\n    let i;\r\n    let j;\r\n    let checkboxID = 0;\r\n\r\n    for (i = 0; i < dataTables.length; i += 1) {\r\n      const indicatorSection = dataTables[i];\r\n      this.sectionCheckBoxes[i] = [];\r\n\r\n      // build this sections checkboxes\r\n      for (j = 0; j < indicatorSection.Tables.length; j += 1) {\r\n        const indicator = indicatorSection.Tables[j];\r\n\r\n        let cbInfo = {};\r\n        cbInfo.name = indicator.TableName;\r\n        cbInfo.id = checkboxID.toString();\r\n        cbInfo.sid = i;\r\n        cbInfo.tid = j;\r\n        cbInfo.checked = false;\r\n        this.checkBoxInfo.push(cbInfo);\r\n\r\n        this.sectionCheckBoxes[i].push(\r\n          <div key={cbInfo.id}>\r\n            <input\r\n              type=\"checkbox\"\r\n              name={this.checkBoxInfo[checkboxID].name}\r\n              id={this.checkBoxInfo[checkboxID].id}\r\n              onChange={(e) => this.onCheckBoxClicked(e)}\r\n            />\r\n            <label htmlFor={this.checkBoxInfo[checkboxID].id}>\r\n              {this.checkBoxInfo[checkboxID].name}\r\n            </label>\r\n            <br />\r\n          </div>\r\n        );\r\n\r\n        checkboxID += 1;\r\n      }\r\n\r\n      // build this sections accordion\r\n      this.indicatorSections.push(\r\n        <Accordion defaultActiveKey=\"0\">\r\n          <Card>\r\n            <Card.Header id=\"indicatorHeader\">\r\n              <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\r\n                {indicatorSection.SectionName}\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>{this.sectionCheckBoxes[i]}</Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div id=\"IndicatorAccordion\">{this.indicatorSections}</div>;\r\n  }\r\n}\r\n\r\nIndicatorPage.propTypes = {\r\n  indicatorList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      indicatorIdx: PropTypes.number,\r\n      sectionIdx: PropTypes.number,\r\n      tableIdx: PropTypes.number,\r\n    })\r\n  ),\r\n  onAddIndicator: PropTypes.func,\r\n  onRemoveIndicator: PropTypes.func,\r\n};\r\nIndicatorPage.defaultProps = {\r\n  indicatorList: null,\r\n  onAddIndicator: null,\r\n  onRemoveIndicator: null,\r\n};\r\n\r\nexport default IndicatorPage;\r\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\ConfirmationPage\\ConfirmationPage.js",["94","95","96","97","98","99"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport locations from \"../../../assets/data/geographies.json\";\nimport dataTables from \"../../../assets/data/customTables.json\";\n\nclass ConfirmationPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.lList = [];\n    this.iList = [];\n  }\n\n  render() {\n    const { locationList, indicatorList } = this.props;\n\n    let itemID = 0;\n    locationList.forEach((location) => {\n      let locationName;\n      if (location.countyIdx === -1 && location.placeIdx === -1) {\n        locationName = locations[location.stateIdx].StateName;\n      } else if (location.countyIdx !== -1 && location.placeIdx === -1) {\n        locationName =\n          locations[location.stateIdx].Counties[location.countyIdx].CountyName;\n      } else if (location.countyIdx === -1 && location.placeIdx !== -1) {\n        locationName =\n          locations[location.stateIdx].Places[location.placeIdx].PlaceName;\n      }\n\n      this.lList.push(\n        <ListGroup.Item action eventKey={itemID} key={itemID}>\n          {locationName}\n        </ListGroup.Item>\n      );\n      itemID += 1;\n    });\n\n    itemID = 0;\n    indicatorList.forEach((indicator) => {\n      this.iList.push(\n        <ListGroup.Item action eventKey={itemID} key={itemID}>\n          {\n            dataTables[indicator.sectionIdx].Tables[indicator.tableIdx]\n              .TableName\n          }\n        </ListGroup.Item>\n      );\n      itemID += 1;\n    });\n\n    return (\n      <div>\n        <ListGroup>{this.lList}</ListGroup>\n        <ListGroup>{this.iList}</ListGroup>\n      </div>\n    );\n  }\n}\n\nConfirmationPage.propTypes = {\n  locationList: PropTypes.arrayOf(\n    PropTypes.shape({\n      stateIdx: PropTypes.number,\n      countyIdx: PropTypes.number,\n      placeIdx: PropTypes.number,\n    })\n  ),\n  indicatorList: PropTypes.arrayOf(\n    PropTypes.shape({\n      indicatorIdx: PropTypes.number,\n      sectionIdx: PropTypes.number,\n      tableIdx: PropTypes.number,\n    })\n  ),\n};\nConfirmationPage.defaultProps = {\n  locationList: null,\n  indicatorList: null,\n};\n\nexport default ConfirmationPage;\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\GraphPage\\GraphPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LoadingPage\\LoadingPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\LocationLevelButtons.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectorTable.js",["100","101","102","103","104","105","106"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nclass SelectorTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    // put each state name into the listgroup\n    this.stateList = [];\n    this.secondariesList = [];\n    const { locations } = this.props;\n    let itemID = 0;\n    locations.forEach((location) => {\n      this.stateList.push(\n        <ListGroup.Item\n          action\n          eventKey={itemID}\n          key={itemID}\n          onClick={(e) => this.onStateListClick(e)}\n        >\n          {location.StateName}\n        </ListGroup.Item>\n      );\n      itemID += 1;\n    });\n\n    this.onSecondariesListClick = this.onSecondariesListClick.bind(this);\n    this.onStateListClick = this.onStateListClick.bind(this);\n    this.buildSelectorTable = this.buildSelectorTable.bind(this);\n  }\n\n  onSecondariesListClick(event) {\n    const { level, setCountyIdx, setPlaceIdx } = this.props;\n\n    const tmpSecondaryIdx = event.target.attributes[0].value;\n    // console.log(tmpSecondaryIdx)\n\n    if (level === \"County\") {\n      setCountyIdx(tmpSecondaryIdx);\n    } else if (level === \"Place\") {\n      setPlaceIdx(tmpSecondaryIdx);\n    }\n  }\n\n  onStateListClick(event) {\n    const tmpStateIdx = event.target.attributes[0].value;\n    const { level, onOpenSecondary, setStateIdx } = this.props;\n\n    // set the stateIdx\n    setStateIdx(tmpStateIdx);\n\n    if (level !== \"State\") {\n      const { locations } = this.props;\n\n      // change the stateList title\n      onOpenSecondary(locations[tmpStateIdx].StateName);\n\n      // create secondaryList\n      this.secondariesList = [];\n      let tmpSecondaries = null;\n      let itemID = 0;\n      if (level === \"County\") {\n        tmpSecondaries = locations[tmpStateIdx].Counties;\n        tmpSecondaries.forEach((secondary) => {\n          this.secondariesList.push(\n            <ListGroup.Item\n              action\n              eventKey={itemID}\n              key={itemID}\n              onClick={(e) => this.onSecondariesListClick(e)}\n            >\n              {secondary.CountyName}\n            </ListGroup.Item>\n          );\n          itemID += 1;\n        });\n      } else if (level === \"Place\") {\n        tmpSecondaries = locations[tmpStateIdx].Places;\n        tmpSecondaries.forEach((secondary) => {\n          this.secondariesList.push(\n            <ListGroup.Item\n              action\n              eventKey={itemID}\n              key={itemID}\n              onClick={(e) => this.onSecondariesListClick(e)}\n            >\n              {secondary.PlaceName}\n            </ListGroup.Item>\n          );\n          itemID += 1;\n        });\n      }\n    }\n  }\n\n  buildSelectorTable() {\n    console.log(\"Building selectorTable\");\n\n    const { level, activeCard, stateListTitle } = this.props;\n\n    let secondaryCard = null;\n    if (level !== \"State\") {\n      secondaryCard = (\n        <Card>\n          <Card.Header>\n            <Accordion.Toggle as=\"h6\" eventKey=\"1\">\n              Select a state above\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"1\">\n            <Card.Body id=\"SelectorList\">\n              <ListGroup variant=\"flush\">{this.secondariesList}</ListGroup>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      );\n    }\n\n    return (\n      <Accordion defaultActiveKey={activeCard} activeKey={activeCard}>\n        <Card>\n          <Card.Header>\n            <Accordion.Toggle as=\"h6\" eventKey=\"0\">\n              {stateListTitle}\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"0\">\n            <Card.Body id=\"SelectorList\">\n              <ListGroup variant=\"flush\">{this.stateList}</ListGroup>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n        {secondaryCard}\n      </Accordion>\n    );\n  }\n\n  render() {\n    // build the selectorTable\n    const selectorTable = this.buildSelectorTable();\n\n    return <div id=\"SelectorTable\">{selectorTable}</div>;\n  }\n}\n\nSelectorTable.propTypes = {\n  level: PropTypes.string,\n  // activeList: PropTypes.string,\n  activeCard: PropTypes.string,\n  stateListTitle: PropTypes.string,\n  onOpenSecondary: PropTypes.func,\n  setStateIdx: PropTypes.func,\n  setCountyIdx: PropTypes.func,\n  setPlaceIdx: PropTypes.func,\n  locations: PropTypes.arrayOf(\n    PropTypes.shape({\n      StateName: PropTypes.string,\n      StateID: PropTypes.string,\n      Counties: PropTypes.arrayOf(\n        PropTypes.shape({\n          CountyName: PropTypes.string,\n          CountyID: PropTypes.string,\n        })\n      ),\n      Places: PropTypes.arrayOf(\n        PropTypes.shape({\n          PlaceName: PropTypes.string,\n          PlaceID: PropTypes.string,\n        })\n      ),\n    })\n  ),\n};\nSelectorTable.defaultProps = {\n  level: \"State\",\n  // activeList: '0',\n  activeCard: \"0\",\n  stateListTitle: \"Select a state\",\n  onOpenSecondary: null,\n  setStateIdx: null,\n  setCountyIdx: null,\n  setPlaceIdx: null,\n  locations: null,\n};\n\nexport default SelectorTable;\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectionTable.js",["107","108","109","110","111","112"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nclass SelectionTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.selectionList = [];\n\n    this.buildSelectionTable = this.buildSelectionTable.bind(this);\n    this.onLocationListClick = this.onLocationListClick.bind(this);\n  }\n\n  onLocationListClick(event) {\n    const { setLocationIdx } = this.props;\n\n    const tmpLocationIdx = event.target.attributes[0].value;\n    console.log(tmpLocationIdx);\n\n    setLocationIdx(tmpLocationIdx);\n  }\n\n  buildSelectionTable() {\n    console.log(\"Building selectionTable\");\n\n    const { locationList, locations } = this.props;\n    this.selectionList = [];\n    let itemID = 0;\n\n    locationList.forEach((location) => {\n      this.selectionList.push(\n        <ListGroup.Item\n          action\n          eventKey={itemID}\n          key={itemID}\n          onClick={(e) => this.onLocationListClick(e)}\n        >\n          {location.locationName}\n        </ListGroup.Item>\n      );\n\n      itemID += 1;\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"SelectionTable\">\n        <Accordion defaultActiveKey=\"0\" activeKey=\"0\">\n          <Card>\n            <Card.Header>\n              <h6>Report Area</h6>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body id=\"SelectionList\">\n                <ListGroup variant=\"flush\">{this.selectionList}</ListGroup>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </div>\n    );\n  }\n}\n\nSelectionTable.propTypes = {\n  locationList: PropTypes.arrayOf(\n    PropTypes.shape({\n      locationName: PropTypes.string,\n      geographicLevel: PropTypes.string,\n      primaryID: PropTypes.string,\n      secondaryID: PropTypes.string,\n    })\n  ),\n  setLocationIdx: PropTypes.func,\n  locations: PropTypes.arrayOf(\n    PropTypes.shape({\n      StateName: PropTypes.string,\n      StateID: PropTypes.string,\n      Counties: PropTypes.arrayOf(\n        PropTypes.shape({\n          CountyName: PropTypes.string,\n          CountyID: PropTypes.string,\n        })\n      ),\n      Places: PropTypes.arrayOf(\n        PropTypes.shape({\n          PlaceName: PropTypes.string,\n          PlaceID: PropTypes.string,\n        })\n      ),\n    })\n  ),\n};\nSelectionTable.defaultProps = {\n  locationList: null,\n  setLocationIdx: null,\n  locations: null,\n};\n\nexport default SelectionTable;\n",["113","114","115","116","117","118"],{"ruleId":"119","severity":1,"message":"120","line":5,"column":8,"nodeType":"121","messageId":"122","endLine":5,"endColumn":23},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":3,"column":32,"nodeType":"137","messageId":"138","endLine":3,"endColumn":33,"fix":"139"},{"ruleId":"135","severity":1,"message":"140","line":3,"column":74,"nodeType":"137","messageId":"141","endLine":3,"endColumn":75,"fix":"142"},{"ruleId":"143","severity":1,"message":"144","line":48,"column":8,"nodeType":"145","messageId":"146","endLine":49,"endColumn":1,"fix":"147"},{"ruleId":"143","severity":1,"message":"144","line":80,"column":68,"nodeType":"145","messageId":"146","endLine":81,"endColumn":1,"fix":"148"},{"ruleId":"135","severity":1,"message":"136","line":61,"column":11,"nodeType":"137","messageId":"138","endLine":61,"endColumn":12,"fix":"149"},{"ruleId":"135","severity":1,"message":"140","line":61,"column":50,"nodeType":"137","messageId":"141","endLine":61,"endColumn":51,"fix":"150"},{"ruleId":"143","severity":1,"message":"144","line":69,"column":15,"nodeType":"151","messageId":"146","endLine":70,"endColumn":1,"fix":"152"},{"ruleId":"143","severity":1,"message":"144","line":77,"column":59,"nodeType":"153","messageId":"146","endLine":78,"endColumn":1,"fix":"154"},{"ruleId":"143","severity":1,"message":"144","line":85,"column":55,"nodeType":"153","messageId":"146","endLine":86,"endColumn":1,"fix":"155"},{"ruleId":"143","severity":1,"message":"144","line":165,"column":7,"nodeType":"156","messageId":"146","endLine":166,"endColumn":1,"fix":"157"},{"ruleId":"119","severity":1,"message":"158","line":3,"column":8,"nodeType":"121","messageId":"122","endLine":3,"endColumn":14},{"ruleId":"159","severity":1,"message":"160","line":64,"column":13,"nodeType":"121","messageId":"161","endLine":64,"endColumn":19,"fix":"162"},{"ruleId":"143","severity":1,"message":"144","line":84,"column":17,"nodeType":"163","messageId":"146","endLine":85,"endColumn":1,"fix":"164"},{"ruleId":"143","severity":1,"message":"144","line":103,"column":21,"nodeType":"163","messageId":"146","endLine":104,"endColumn":1,"fix":"165"},{"ruleId":"143","severity":1,"message":"144","line":119,"column":7,"nodeType":"156","messageId":"146","endLine":120,"endColumn":1,"fix":"166"},{"ruleId":"167","severity":1,"message":"168","line":25,"column":22,"nodeType":"169","messageId":"170","endLine":25,"endColumn":23,"fix":"171"},{"ruleId":"167","severity":1,"message":"168","line":28,"column":22,"nodeType":"169","messageId":"170","endLine":28,"endColumn":23,"fix":"172"},{"ruleId":"143","severity":1,"message":"144","line":35,"column":26,"nodeType":"163","messageId":"146","endLine":36,"endColumn":1,"fix":"173"},{"ruleId":"143","severity":1,"message":"144","line":48,"column":26,"nodeType":"163","messageId":"146","endLine":49,"endColumn":1,"fix":"174"},{"ruleId":"143","severity":1,"message":"144","line":68,"column":7,"nodeType":"156","messageId":"146","endLine":69,"endColumn":1,"fix":"175"},{"ruleId":"143","severity":1,"message":"144","line":75,"column":7,"nodeType":"156","messageId":"146","endLine":76,"endColumn":1,"fix":"176"},{"ruleId":"119","severity":1,"message":"158","line":5,"column":8,"nodeType":"121","messageId":"122","endLine":5,"endColumn":14},{"ruleId":"143","severity":1,"message":"144","line":27,"column":26,"nodeType":"163","messageId":"146","endLine":28,"endColumn":1,"fix":"177"},{"ruleId":"143","severity":1,"message":"144","line":78,"column":30,"nodeType":"163","messageId":"146","endLine":79,"endColumn":1,"fix":"178"},{"ruleId":"143","severity":1,"message":"144","line":93,"column":30,"nodeType":"163","messageId":"146","endLine":94,"endColumn":1,"fix":"179"},{"ruleId":"143","severity":1,"message":"144","line":168,"column":11,"nodeType":"156","messageId":"146","endLine":169,"endColumn":1,"fix":"180"},{"ruleId":"143","severity":1,"message":"144","line":174,"column":11,"nodeType":"156","messageId":"146","endLine":175,"endColumn":1,"fix":"181"},{"ruleId":"143","severity":1,"message":"144","line":176,"column":7,"nodeType":"156","messageId":"146","endLine":177,"endColumn":1,"fix":"182"},{"ruleId":"119","severity":1,"message":"183","line":30,"column":27,"nodeType":"121","messageId":"122","endLine":30,"endColumn":36},{"ruleId":"143","severity":1,"message":"144","line":43,"column":26,"nodeType":"163","messageId":"146","endLine":44,"endColumn":1,"fix":"184"},{"ruleId":"143","severity":1,"message":"144","line":77,"column":7,"nodeType":"156","messageId":"146","endLine":78,"endColumn":1,"fix":"185"},{"ruleId":"143","severity":1,"message":"144","line":88,"column":11,"nodeType":"156","messageId":"146","endLine":89,"endColumn":1,"fix":"186"},{"ruleId":"143","severity":1,"message":"144","line":94,"column":11,"nodeType":"156","messageId":"146","endLine":95,"endColumn":1,"fix":"187"},{"ruleId":"143","severity":1,"message":"144","line":96,"column":7,"nodeType":"156","messageId":"146","endLine":97,"endColumn":1,"fix":"188"},{"ruleId":"123","replacedBy":"189"},{"ruleId":"125","replacedBy":"190"},{"ruleId":"127","replacedBy":"191"},{"ruleId":"129","replacedBy":"192"},{"ruleId":"131","replacedBy":"193"},{"ruleId":"133","replacedBy":"194"},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","global-require",[],"lines-around-directive",["195"],"no-spaced-func",["196"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"object-curly-newline","Expected a line break after this opening brace.","ObjectPattern","expectedLinebreakAfterOpeningBrace",{"range":"197","text":"198"},"Expected a line break before this closing brace.","expectedLinebreakBeforeClosingBrace",{"range":"199","text":"198"},"comma-dangle","Missing trailing comma.","ArrowFunctionExpression","missing",{"range":"200","text":"201"},{"range":"202","text":"201"},{"range":"203","text":"198"},{"range":"204","text":"198"},"Literal",{"range":"205","text":"201"},"MemberExpression",{"range":"206","text":"201"},{"range":"207","text":"201"},"CallExpression",{"range":"208","text":"201"},"'Button' is defined but never used.","prefer-const","'cbInfo' is never reassigned. Use 'const' instead.","useConst",{"range":"209","text":"210"},"JSXElement",{"range":"211","text":"201"},{"range":"212","text":"201"},{"range":"213","text":"201"},"operator-linebreak","There should be no line break before or after '='.","AssignmentExpression","noLinebreak",{"range":"214","text":"215"},{"range":"216","text":"215"},{"range":"217","text":"201"},{"range":"218","text":"201"},{"range":"219","text":"201"},{"range":"220","text":"201"},{"range":"221","text":"201"},{"range":"222","text":"201"},{"range":"223","text":"201"},{"range":"224","text":"201"},{"range":"225","text":"201"},{"range":"226","text":"201"},"'locations' is assigned a value but never used.",{"range":"227","text":"201"},{"range":"228","text":"201"},{"range":"229","text":"201"},{"range":"230","text":"201"},{"range":"231","text":"201"},[],["195"],["196"],[],[],[],"padding-line-between-statements","func-call-spacing",[131,131],"\n",[172,172],[1613,1613],",",[2458,2458],[1846,1846],[1884,1884],[2091,2091],[2418,2418],[2735,2735],[4929,4929],[1890,1906],"const cbInfo = {};",[2606,2606],[3220,3220],[3549,3549],[781,794]," =          ",[958,971],[1182,1182],[1511,1511],[1886,1886],[2064,2064],[796,796],[2299,2299],[2776,2776],[4761,4761],[4916,4916],[4932,4932],[1160,1160],[1958,1958],[2269,2269],[2424,2424],[2440,2440]]