[{"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\index.js":"1","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\App.js":"2","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppFooter.js":"4","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppHeader.js":"5","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppSection.js":"6","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppNav.js":"7","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LoadingPage\\LoadingPage.js":"8","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\LocationPage.js":"9","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\IndicatorPage.js":"10","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\GraphPage\\GraphPage.js":"11","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\ConfirmationPage\\ConfirmationPage.js":"12","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\LocationLevelButtons.js":"13","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectorTable.js":"14","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectionTable.js":"15","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\CheckBoxLabel.js":"16","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\SectionAccordion.js":"17"},{"size":449,"mtime":1616093647498,"results":"18","hashOfConfig":"19"},{"size":1165,"mtime":1614807220991,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1616095002193,"results":"21","hashOfConfig":"19"},{"size":1538,"mtime":1614807223684,"results":"22","hashOfConfig":"19"},{"size":529,"mtime":1614807223692,"results":"23","hashOfConfig":"19"},{"size":4400,"mtime":1617038989394,"results":"24","hashOfConfig":"19"},{"size":606,"mtime":1614807223701,"results":"25","hashOfConfig":"19"},{"size":1046,"mtime":1617038119280,"results":"26","hashOfConfig":"19"},{"size":7635,"mtime":1617031257562,"results":"27","hashOfConfig":"19"},{"size":4406,"mtime":1616516471827,"results":"28","hashOfConfig":"19"},{"size":327,"mtime":1614807223806,"results":"29","hashOfConfig":"19"},{"size":3629,"mtime":1616531895625,"results":"30","hashOfConfig":"19"},{"size":1316,"mtime":1614807223889,"results":"31","hashOfConfig":"19"},{"size":8433,"mtime":1617040015249,"results":"32","hashOfConfig":"19"},{"size":2318,"mtime":1617031826142,"results":"33","hashOfConfig":"19"},{"size":890,"mtime":1616446410454,"results":"34","hashOfConfig":"19"},{"size":3632,"mtime":1616526315159,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"19hsamx",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":7,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":6,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"75","usedDeprecatedRules":"38"},"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\index.js",[],["76","77","78","79","80","81"],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\App.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppFooter.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppHeader.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppSection.js",["82","83","84"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport LocationPage from \"./pages/LocationPage/LocationPage\";\r\nimport IndicatorPage from \"./pages/IndicatorPage/IndicatorPage\";\r\nimport ConfirmationPage from \"./pages/ConfirmationPage/ConfirmationPage\";\r\nimport LoadingPage from \"./pages/LoadingPage/LoadingPage\";\r\nimport GraphPage from \"./pages/GraphPage/GraphPage\";\r\n\r\nconst electron = window.require(\"electron\");\r\nconst { ipcRenderer } = electron;\r\n\r\nclass AppSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      locationList: [],\r\n      indicatorList: [],\r\n      progress: 0,\r\n    };\r\n\r\n    this.addLocation = this.addLocation.bind(this);\r\n    this.removeLocation = this.removeLocation.bind(this);\r\n    this.addIndicator = this.addIndicator.bind(this);\r\n    this.removeIndicator = this.removeIndicator.bind(this);\r\n    this.startPythonScript = this.startPythonScript.bind(this);\r\n\r\n    const { onPageChange } = this.props;\r\n\r\n    ipcRenderer.on(\"MESSAGE_FROM_BACKGROUND_VIA_MAIN\", (event, args) => {\r\n      console.log(args)\r\n      const newProgress = parseFloat(args) * 100;\r\n      this.setState({ progress: newProgress });\r\n      if (newProgress >= 100) {\r\n        onPageChange(1);\r\n      }\r\n    });\r\n  }\r\n\r\n  addLocation(locationName, geographicLevel, primaryID, secondaryID) {\r\n    const { locationList } = this.state;\r\n    const idx = locationList.findIndex(\r\n      (i) => (\r\n        i.geographicLevel === geographicLevel\r\n        && i.primaryID === primaryID\r\n        && i.secondaryID === secondaryID\r\n      ),\r\n    );\r\n    if (idx === -1) {\r\n      locationList.push({\r\n        locationName,\r\n        geographicLevel,\r\n        primaryID,\r\n        secondaryID,\r\n      });\r\n      this.setState({ locationList });\r\n    }\r\n  }\r\n\r\n  removeLocation(locationIdx) {\r\n    const { locationList } = this.state;\r\n\r\n    if (locationList.length > locationIdx) {\r\n      locationList.splice(locationIdx, 1);\r\n      this.setState({ locationList });\r\n    }\r\n\r\n    console.log(\"appsection\");\r\n    console.log(locationList);\r\n  }\r\n\r\n  addIndicator(sectionIdx, tableIdx, tableName) {\r\n    const { indicatorList } = this.state;\r\n    const idx = indicatorList.findIndex(\r\n      (i) => i.sectionIdx === sectionIdx && i.tableIdx === tableIdx,\r\n    );\r\n    if (idx === -1) {\r\n      indicatorList.push({ tableName, sectionIdx, tableIdx });\r\n      this.setState({ indicatorList });\r\n    } else {\r\n      console.log(\"tried to add an indicator twice\");\r\n    }\r\n\r\n    console.log(indicatorList);\r\n  }\r\n\r\n  removeIndicator(sectionIdx, tableIdx) {\r\n    const { indicatorList } = this.state;\r\n    const idx = indicatorList.findIndex(\r\n      (i) => i.sectionIdx === sectionIdx && i.tableIdx === tableIdx,\r\n    );\r\n    if (idx !== -1) {\r\n      indicatorList.splice(idx, 1);\r\n      this.setState({ indicatorList });\r\n    }\r\n\r\n    console.log(indicatorList);\r\n  }\r\n\r\n  startPythonScript() {\r\n    const { locationList, indicatorList } = this.state;\r\n\r\n    // ipcRenderer.send(\"START_BACKGROUND_VIA_MAIN\", {\r\n    //   reportArea: locationList,\r\n    //   selectedIndicators: indicatorList,\r\n    // });\r\n\r\n    ipcRenderer.send(\"FAKE_BACKGROUND_VIA_MAIN\");\r\n  }\r\n\r\n  render() {\r\n    const { page } = this.props;\r\n    const { locationList, indicatorList, progress } = this.state;\r\n\r\n    let section;\r\n    if (page === 0) {\r\n      section = (\r\n        <LocationPage\r\n          locationList={locationList}\r\n          onAddLocation={this.addLocation}\r\n          onRemoveLocation={this.removeLocation}\r\n        />\r\n      );\r\n    } else if (page === 1) {\r\n      section = (\r\n        <IndicatorPage\r\n          indicatorList={indicatorList}\r\n          onAddIndicator={this.addIndicator}\r\n          onRemoveIndicator={this.removeIndicator}\r\n        />\r\n      );\r\n    } else if (page === 2) {\r\n      section = (\r\n        <ConfirmationPage\r\n          locationList={locationList}\r\n          indicatorList={indicatorList}\r\n        />\r\n      );\r\n    } else if (page === 3) {\r\n      section = (\r\n        <LoadingPage progress={progress} onPageMount={this.startPythonScript} />\r\n      );\r\n    } else if (page === 4) {\r\n      section = <GraphPage />;\r\n    }\r\n    return <>{section}</>;\r\n  }\r\n}\r\n\r\nAppSection.propTypes = {\r\n  page: PropTypes.number,\r\n  onPageChange: PropTypes.func,\r\n};\r\nAppSection.defaultProps = {\r\n  page: 0,\r\n  onPageChange: null,\r\n};\r\n\r\nexport default AppSection;\r\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppNav.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LoadingPage\\LoadingPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\LocationPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\IndicatorPage.js",["85","86","87","88","89","90","91","92"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SectionAccordion from \"./subcomponents/SectionAccordion\";\r\nimport CheckBoxLabel from \"./subcomponents/CheckBoxLabel\";\r\nimport customTables from \"../../../assets/data/customTables.json\";\r\nimport \"../../css/IndicatorPage.css\";\r\n\r\nclass IndicatorPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let cbStates = {};\r\n    cbStates.all = false;\r\n    for (let i = 0; i < customTables.length; i += 1) {\r\n      cbStates[`${i}`] = {};\r\n      cbStates[`${i}`][\"-1\"] = false;\r\n      for (let j = 0; j < customTables[i].SectionTables.length; j += 1) {\r\n        cbStates[`${i}`][`${j}`] = false;\r\n      }\r\n    }\r\n\r\n    this.state = {\r\n      checkBoxStates: cbStates,\r\n    };\r\n\r\n    this.sectionAccordions = [];\r\n\r\n    this.handleTableChange = this.handleTableChange.bind(this);\r\n    this.handleStateChange = this.handleStateChange.bind(this);\r\n    this.onAllBoxClicked = this.onAllBoxClicked.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { indicatorList } = this.props;\r\n    // TODO: Implement persistent indicator selection display\r\n    // indicatorList.forEach((indicator) => {\r\n    //   const index = indicator.indicatorIdx;\r\n    //   document.getElementById(index).checked = true;\r\n    //   this.info[index].checked = true;\r\n    // });\r\n  }\r\n\r\n  handleTableChange(sid, tid, checked) {\r\n    const { onAddIndicator, onRemoveIndicator } = this.props;\r\n\r\n    if (checked) {\r\n      const tableName = customTables[sid].SectionTables[tid].TableName;\r\n      onAddIndicator(sid, tid, tableName);\r\n    } else {\r\n      onRemoveIndicator(sid, tid);\r\n    }\r\n  }\r\n\r\n  handleStateChange(id, checked) {\r\n    const { checkBoxStates } = this.state;\r\n\r\n    const tmpIDs = id.split(\".\");\r\n    const sid = parseInt(tmpIDs[0], 10);\r\n    const tid = parseInt(tmpIDs[1], 10);\r\n\r\n    if (tid === -1) {\r\n      if (sid === -1) {\r\n        // All Indicators checkbox clicked. Change all checkboxes to match\r\n        checkBoxStates.all = checked\r\n      } else {\r\n        // Section checkbox clicked. Change all section checkboxes to match\r\n        checkBoxStates[sid][tid] = checked\r\n\r\n        let allChecked = true;\r\n        for (let i = 0; i < customTables.length; i += 1) {\r\n          if (!checkBoxStates[i][\"-1\"]) {\r\n            allChecked = false;\r\n          }\r\n        }\r\n\r\n        if (allChecked !== checkBoxStates.all) {\r\n          this.handleStateChange(\"-1.-1\", allChecked);\r\n        }\r\n      }\r\n    } else {\r\n      // Indicator checkbox was clicked. Change checkbox to match\r\n      checkBoxStates[sid][tid] = checked\r\n      this.handleTableChange(sid, tid, checked)\r\n    }\r\n\r\n    this.setState({ checkBoxStates });\r\n  }\r\n\r\n  onAllBoxClicked(event) {\r\n    const { checkBoxStates } = this.state;\r\n\r\n    for (let i = 0; i < customTables.length; i += 1) {\r\n      if (checkBoxStates[i][\"-1\"] !== event.target.checked) {\r\n        checkBoxStates[i][\"-1\"] = event.target.checked;\r\n      }\r\n      for (let j = 0; j < customTables[i].SectionTables.length; j += 1) {\r\n        if (checkBoxStates[i][j] !== event.target.checked) {\r\n          this.handleStateChange(`${i}.${j}`, event.target.checked)\r\n        }\r\n      }\r\n    }\r\n\r\n    this.handleStateChange(\"-1.-1\", event.target.checked)\r\n  }\r\n\r\n  render() {\r\n    const { checkBoxStates } = this.state;\r\n    this.sectionAccordions = [];\r\n\r\n    for (let i = 0; i < customTables.length; i += 1) {\r\n      const customSection = customTables[i];\r\n      this.sectionAccordions.push(\r\n        <SectionAccordion\r\n          key={`${i}`}\r\n          sid={`${i}`}\r\n          sectionInfo={customSection}\r\n          sectionStates={checkBoxStates[i]}\r\n          handleStateChange={this.handleStateChange}\r\n        />,\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div id=\"IndicatorPage\">\r\n        <CheckBoxLabel id=\"-1.-1\" name=\"All Tables\" checked={checkBoxStates.all} onClick={this.onAllBoxClicked} />\r\n        {this.sectionAccordions}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIndicatorPage.propTypes = {\r\n  indicatorList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      sectionIdx: PropTypes.number,\r\n      tableIdx: PropTypes.number,\r\n      tableName: PropTypes.string,\r\n    }),\r\n  ),\r\n  onAddIndicator: PropTypes.func,\r\n  onRemoveIndicator: PropTypes.func,\r\n};\r\nIndicatorPage.defaultProps = {\r\n  indicatorList: null,\r\n  onAddIndicator: null,\r\n  onRemoveIndicator: null,\r\n};\r\n\r\nexport default IndicatorPage;\r\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\GraphPage\\GraphPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\ConfirmationPage\\ConfirmationPage.js",["93","94","95"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport dataTables from \"../../../assets/data/customTables.json\";\nimport \"../../css/ConfirmationPage.css\";\n\nconst electron = window.require(\"electron\");\nconst { ipcRenderer } = electron;\n\nclass ConfirmationPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.lList = [];\n    this.iList = [];\n\n    this.dialogue = this.dialogue.bind(this);\n\n    ipcRenderer.on(\"RETURN_DIALOG\", (event, args) => {\n      console.log(args);\n    });\n  }\n\n  dialogue() {\n    // const electron = window.require(\"electron\");\n    // const { dialog } = electron;\n    const { locationList } = this.props;\n    console.log(\"clicked!\");\n    // console.log(dialog.showOpenDialog(electron.renderer.Remote.getCurrentWindow(), {}))\n\n    ipcRenderer.send(\"START_DIALOG\");\n  }\n\n  render() {\n    const { locationList, indicatorList } = this.props;\n\n    let itemID = 0;\n    locationList.forEach((location) => {\n      this.lList.push(\n        <ListGroup.Item action eventKey={itemID} key={itemID}>\n          {location.locationName}\n        </ListGroup.Item>,\n      );\n      itemID += 1;\n    });\n\n    itemID = 0;\n    indicatorList.forEach((indicator) => {\n      this.iList.push(\n        <ListGroup.Item action eventKey={itemID} key={itemID}>\n          {\n            indicator.tableName\n          }\n        </ListGroup.Item>,\n      );\n      itemID += 1;\n    });\n\n    return (\n      <div className=\"ConfirmationPage\">\n        <div className=\"ConfirmationTables\">\n          <Accordion defaultActiveKey=\"0\">\n            <Card>\n              <Card.Header id=\"ListHeader\">\n                <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\n                  Report Area\n                </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"0\">\n                <Card.Body id=\"ConfirmationList\">\n                  <ListGroup variant=\"flush\">\n                    {this.lList}\n                  </ListGroup>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n          <Accordion defaultActiveKey=\"0\">\n            <Card>\n              <Card.Header id=\"ListHeader\">\n                <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\n                  Selected Tables\n                </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"0\">\n                <Card.Body id=\"ConfirmationList\">\n                  <ListGroup variant=\"flush\">\n                    {this.iList}\n                  </ListGroup>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n        </div>\n        <Form.File\n          name=\"file\"\n          label=\"Save as\"\n        />\n      </div>\n    );\n  }\n}\n\nConfirmationPage.propTypes = {\n  locationList: PropTypes.arrayOf(\n    PropTypes.shape({\n      locationName: PropTypes.string,\n      geographicLevel: PropTypes.string,\n      primaryID: PropTypes.string,\n      secondaryID: PropTypes.string,\n    }),\n  ),\n  indicatorList: PropTypes.arrayOf(\n    PropTypes.shape({\n      indicatorIdx: PropTypes.number,\n      sectionIdx: PropTypes.number,\n      tableIdx: PropTypes.number,\n    }),\n  ),\n};\nConfirmationPage.defaultProps = {\n  locationList: null,\n  indicatorList: null,\n};\n\nexport default ConfirmationPage;\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\LocationLevelButtons.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectorTable.js",["96","97","98","99","100","101","102","103","104","105"],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectionTable.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\CheckBoxLabel.js",["106","107"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../../../css/IndicatorPage.css\";\r\n\r\nclass CheckBoxLabel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { id, name, checked, onClick } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <label htmlFor={id}>\r\n          <input\r\n            type=\"checkbox\"\r\n            name={name}\r\n            id={id}\r\n            checked={checked}\r\n            onChange={(e) => onClick(e)}\r\n          />\r\n          {name}\r\n        </label>\r\n        <br />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nCheckBoxLabel.propTypes = {\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  checked: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n};\r\nCheckBoxLabel.defaultProps = {\r\n  id: null,\r\n  name: null,\r\n  checked: false,\r\n  onClick: null,\r\n};\r\n\r\nexport default CheckBoxLabel;\r\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\SectionAccordion.js",["108","109","110","111"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport CheckBoxLabel from \"./CheckBoxLabel\";\r\nimport \"../../../css/IndicatorPage.css\";\r\n\r\nclass SectionAccordion extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n\r\n    this.onSectionBoxClicked = this.onSectionBoxClicked.bind(this);\r\n    this.onTableBoxClicked = this.onTableBoxClicked.bind(this);\r\n  }\r\n\r\n  onSectionBoxClicked(event) {\r\n    const { sid, sectionInfo, sectionStates, handleStateChange } = this.props;\r\n    handleStateChange(event.target.id, event.target.checked);\r\n\r\n    for (let i = 0; i < sectionInfo.SectionTables.length; i += 1) {\r\n      if (sectionStates[i] !== event.target.checked) {\r\n        handleStateChange(`${sid}.${i}`, event.target.checked);\r\n      }\r\n    }\r\n  }\r\n\r\n  onTableBoxClicked(event) {\r\n    const { sid, sectionInfo, sectionStates, handleStateChange } = this.props;\r\n    handleStateChange(event.target.id, event.target.checked);\r\n\r\n    let sectionChecked = true;\r\n    for (let i = 0; i < sectionInfo.SectionTables.length; i += 1) {\r\n      if (!sectionStates[i]) {\r\n        sectionChecked = false;\r\n      }\r\n    }\r\n\r\n    if (sectionChecked !== sectionStates[\"-1\"]) {\r\n      handleStateChange(`${sid}.-1`, sectionChecked);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { sid, sectionInfo, sectionStates } = this.props;\r\n    const sectionTables = [];\r\n    for (let i = 0; i < sectionInfo.SectionTables.length; i += 1) {\r\n      const table = sectionInfo.SectionTables[i];\r\n      sectionTables.push(\r\n        <CheckBoxLabel\r\n          key={`${sid}.${i}`}\r\n          id={`${sid}.${i}`}\r\n          name={table.TableName}\r\n          checked={sectionStates[i]}\r\n          onClick={this.onTableBoxClicked}\r\n        />,\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"SectionAccordion\">\r\n        <Accordion defaultActiveKey={sid}>\r\n          <Card>\r\n            <Card.Header id=\"indicatorHeader\">\r\n              <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={sid}>\r\n                <div>\r\n                  <label htmlFor={`${sid}.-1`}>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name={sectionInfo.SectionName}\r\n                      id={`${sid}.-1`}\r\n                      checked={sectionStates[\"-1\"]}\r\n                      onChange={(e) => this.onSectionBoxClicked(e)}\r\n                    />\r\n                    {sectionInfo.SectionName}\r\n                  </label>\r\n                </div>\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey={sid}>\r\n              <Card.Body>{sectionTables}</Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSectionAccordion.propTypes = {\r\n  sid: PropTypes.string,\r\n  sectionInfo: PropTypes.shape({\r\n    SectionName: PropTypes.string,\r\n    SectionTables: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        TableName: PropTypes.string,\r\n        TableIndicators: PropTypes.arrayOf(\r\n          PropTypes.shape({\r\n            IndicatorName: PropTypes.string,\r\n            IndicatorFormula: PropTypes.arrayOf(\r\n              PropTypes.string,\r\n            ),\r\n          }),\r\n        ),\r\n      }),\r\n    ),\r\n  }),\r\n  sectionStates: PropTypes.arrayOf(\r\n    PropTypes.bool,\r\n  ),\r\n  handleStateChange: PropTypes.func,\r\n};\r\nSectionAccordion.defaultProps = {\r\n  sid: null,\r\n  sectionInfo: null,\r\n  sectionStates: null,\r\n  handleStateChange: null,\r\n};\r\n\r\nexport default SectionAccordion;\r\n",{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":30,"column":24,"nodeType":"126","messageId":"127","endLine":31,"endColumn":1,"fix":"128"},{"ruleId":"129","severity":1,"message":"130","line":100,"column":13,"nodeType":"131","messageId":"132","endLine":100,"endColumn":25},{"ruleId":"129","severity":1,"message":"133","line":100,"column":27,"nodeType":"131","messageId":"132","endLine":100,"endColumn":40},{"ruleId":"134","severity":1,"message":"135","line":12,"column":9,"nodeType":"131","messageId":"136","endLine":12,"endColumn":17,"fix":"137"},{"ruleId":"129","severity":1,"message":"133","line":34,"column":13,"nodeType":"131","messageId":"132","endLine":34,"endColumn":26},{"ruleId":"124","severity":1,"message":"125","line":64,"column":37,"nodeType":"126","messageId":"127","endLine":65,"endColumn":1,"fix":"138"},{"ruleId":"124","severity":1,"message":"125","line":67,"column":43,"nodeType":"126","messageId":"127","endLine":68,"endColumn":1,"fix":"139"},{"ruleId":"124","severity":1,"message":"125","line":82,"column":41,"nodeType":"126","messageId":"127","endLine":83,"endColumn":1,"fix":"140"},{"ruleId":"124","severity":1,"message":"125","line":83,"column":48,"nodeType":"126","messageId":"127","endLine":84,"endColumn":1,"fix":"141"},{"ruleId":"124","severity":1,"message":"125","line":98,"column":68,"nodeType":"126","messageId":"127","endLine":99,"endColumn":1,"fix":"142"},{"ruleId":"124","severity":1,"message":"125","line":103,"column":58,"nodeType":"126","messageId":"127","endLine":104,"endColumn":1,"fix":"143"},{"ruleId":"129","severity":1,"message":"144","line":3,"column":8,"nodeType":"131","messageId":"132","endLine":3,"endColumn":14},{"ruleId":"129","severity":1,"message":"145","line":8,"column":8,"nodeType":"131","messageId":"132","endLine":8,"endColumn":18},{"ruleId":"129","severity":1,"message":"130","line":32,"column":13,"nodeType":"131","messageId":"132","endLine":32,"endColumn":25},{"ruleId":"129","severity":1,"message":"146","line":8,"column":10,"nodeType":"131","messageId":"132","endLine":8,"endColumn":19},{"ruleId":"129","severity":1,"message":"147","line":8,"column":21,"nodeType":"131","messageId":"132","endLine":8,"endColumn":24},{"ruleId":"148","severity":1,"message":"149","line":32,"column":26,"nodeType":"150","messageId":"151","endLine":33,"endColumn":1,"fix":"152"},{"ruleId":"153","severity":1,"message":"154","line":94,"column":11,"nodeType":"155","messageId":"156","endLine":94,"endColumn":12,"fix":"157"},{"ruleId":"153","severity":1,"message":"158","line":94,"column":61,"nodeType":"155","messageId":"159","endLine":94,"endColumn":62,"fix":"160"},{"ruleId":"153","severity":1,"message":"154","line":111,"column":11,"nodeType":"155","messageId":"156","endLine":111,"endColumn":12,"fix":"161"},{"ruleId":"153","severity":1,"message":"158","line":111,"column":64,"nodeType":"155","messageId":"159","endLine":111,"endColumn":65,"fix":"162"},{"ruleId":"129","severity":1,"message":"163","line":167,"column":13,"nodeType":"131","messageId":"132","endLine":167,"endColumn":18},{"ruleId":"129","severity":1,"message":"163","line":187,"column":7,"nodeType":"131","messageId":"132","endLine":187,"endColumn":12},{"ruleId":"134","severity":1,"message":"164","line":195,"column":9,"nodeType":"131","messageId":"136","endLine":195,"endColumn":25,"fix":"165"},{"ruleId":"153","severity":1,"message":"154","line":12,"column":11,"nodeType":"155","messageId":"156","endLine":12,"endColumn":12,"fix":"166"},{"ruleId":"153","severity":1,"message":"158","line":12,"column":40,"nodeType":"155","messageId":"159","endLine":12,"endColumn":41,"fix":"167"},{"ruleId":"153","severity":1,"message":"154","line":18,"column":11,"nodeType":"155","messageId":"156","endLine":18,"endColumn":12,"fix":"168"},{"ruleId":"153","severity":1,"message":"158","line":18,"column":64,"nodeType":"155","messageId":"159","endLine":18,"endColumn":65,"fix":"169"},{"ruleId":"153","severity":1,"message":"154","line":29,"column":11,"nodeType":"155","messageId":"156","endLine":29,"endColumn":12,"fix":"170"},{"ruleId":"153","severity":1,"message":"158","line":29,"column":64,"nodeType":"155","messageId":"159","endLine":29,"endColumn":65,"fix":"171"},"global-require",[],"lines-around-directive",["172"],"no-spaced-func",["173"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"semi","Missing semicolon.","ExpressionStatement","missingSemi",{"range":"174","text":"175"},"no-unused-vars","'locationList' is assigned a value but never used.","Identifier","unusedVar","'indicatorList' is assigned a value but never used.","prefer-const","'cbStates' is never reassigned. Use 'const' instead.","useConst",{"range":"176","text":"177"},{"range":"178","text":"175"},{"range":"179","text":"175"},{"range":"180","text":"175"},{"range":"181","text":"175"},{"range":"182","text":"175"},{"range":"183","text":"175"},"'Button' is defined but never used.","'dataTables' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","comma-dangle","Missing trailing comma.","JSXElement","missing",{"range":"184","text":"185"},"object-curly-newline","Expected a line break after this opening brace.","ObjectPattern","expectedLinebreakAfterOpeningBrace",{"range":"186","text":"187"},"Expected a line break before this closing brace.","expectedLinebreakBeforeClosingBrace",{"range":"188","text":"187"},{"range":"189","text":"187"},{"range":"190","text":"187"},"'level' is assigned a value but never used.","'resetStateButton' is never reassigned. Use 'const' instead.",{"range":"191","text":"192"},{"range":"193","text":"187"},{"range":"194","text":"187"},{"range":"195","text":"187"},{"range":"196","text":"187"},{"range":"197","text":"187"},{"range":"198","text":"187"},"padding-line-between-statements","func-call-spacing",[1093,1093],";",[396,414],"const cbStates = {};",[2017,2017],[2154,2154],[2599,2599],[2648,2648],[3169,3169],[3257,3257],[1002,1002],",",[2666,2666],"\n",[2715,2715],[3104,3104],[3156,3156],[5607,5737],"const resetStateButton = (\n      <Button id=\"ResetStateButton\" onClick={this.handleResetClick}>\n        Reset\n      </Button>\n    );",[253,253],[281,281],[550,550],[602,602],[938,938],[990,990]]