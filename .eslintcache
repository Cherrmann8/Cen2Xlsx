[{"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\index.js":"1","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\App.js":"2","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppHeader.js":"4","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppSection.js":"5","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppFooter.js":"6","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppNav.js":"7","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LoadingPage\\LoadingPage.js":"8","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\LocationPage.js":"9","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\GraphPage\\GraphPage.js":"10","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\IndicatorPage.js":"11","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\ConfirmationPage\\ConfirmationPage.js":"12","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectionTable.js":"13","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectorTable.js":"14","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\LocationLevelButtons.js":"15","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\SectionAccordion.js":"16","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\CheckBoxLabel.js":"17"},{"size":449,"mtime":1616093647498,"results":"18","hashOfConfig":"19"},{"size":4820,"mtime":1617942988039,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1616095002193,"results":"21","hashOfConfig":"19"},{"size":529,"mtime":1614807223692,"results":"22","hashOfConfig":"19"},{"size":7642,"mtime":1617939648183,"results":"23","hashOfConfig":"19"},{"size":3132,"mtime":1617294757760,"results":"24","hashOfConfig":"19"},{"size":717,"mtime":1617128770766,"results":"25","hashOfConfig":"19"},{"size":945,"mtime":1617284606343,"results":"26","hashOfConfig":"19"},{"size":7577,"mtime":1617288315744,"results":"27","hashOfConfig":"19"},{"size":334,"mtime":1617725156338,"results":"28","hashOfConfig":"19"},{"size":4741,"mtime":1617294921558,"results":"29","hashOfConfig":"19"},{"size":5438,"mtime":1617665563070,"results":"30","hashOfConfig":"19"},{"size":2322,"mtime":1617294300679,"results":"31","hashOfConfig":"19"},{"size":8548,"mtime":1617287257956,"results":"32","hashOfConfig":"19"},{"size":1316,"mtime":1614807223889,"results":"33","hashOfConfig":"19"},{"size":3864,"mtime":1617292207815,"results":"34","hashOfConfig":"19"},{"size":945,"mtime":1617290893875,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"19hsamx",{"filePath":"39","messages":"40","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":4,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":7,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"79","usedDeprecatedRules":"38"},"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\index.js",[],["80","81","82","83","84","85"],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\App.js",["86","87","88","89","90","91","92","93","94","95","96"],"import React from \"react\";\nimport AppHeader from \"./components/AppHeader\";\nimport AppSection from \"./components/AppSection\";\nimport AppFooter from \"./components/AppFooter\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nconst path = require(\"path\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      invalidLocations: true,\n      invalidIndicators: true,\n      invalidFileName: false,\n      invalidFilePath: false,\n    };\n\n    this.appSection = React.createRef();\n\n    this.handlePageChange = this.handlePageChange.bind(this);\n    this.setInvalidLocations = this.setInvalidLocations.bind(this);\n    this.setInvalidIndicators = this.setInvalidIndicators.bind(this);\n    this.setInvalidFileName = this.setInvalidFileName.bind(this);\n    this.setInvalidFilePath = this.setInvalidFilePath.bind(this);\n    this.incPage = this.incPage.bind(this);\n    this.decPage = this.decPage.bind(this);\n\n    console.log(process.env.ELECTRON_START_URL);\n    console.log(process.env.PUBLIC_URL);\n  }\n\n  componentDidMount() {\n    const navPage = document.getElementById(\"NavPage\");\n    navPage.addEventListener(\"animationend\", (e) => {\n      if (navPage.className === \"exitRight\") {\n        navPage.className = \"enterLeft\";\n        this.decPage();\n      } else if (navPage.className === \"exitLeft\") {\n        navPage.className = \"enterRight\";\n        this.incPage();\n      } else if (navPage.className === \"enterRight\") {\n        navPage.className += \"\";\n      } else if (navPage.className === \"enterLeft\") {\n        navPage.className += \"\";\n      }\n    });\n\n    const appSection = document.getElementById(\"AppSection\");\n    appSection.addEventListener(\"animationend\", (e) => {\n      if (appSection.className === \"exitRight\") {\n        appSection.className = \"enterLeft\";\n      } else if (appSection.className === \"exitLeft\") {\n        appSection.className = \"enterRight\";\n      } else if (appSection.className === \"enterRight\") {\n        appSection.className += \"\";\n      } else if (appSection.className === \"enterLeft\") {\n        appSection.className += \"\";\n      }\n    });\n  }\n\n  handlePageChange(increment) {\n    const {\n      page,\n      invalidLocations,\n      invalidIndicators,\n      invalidFileName,\n      invalidFilePath\n    } = this.state;\n\n    if (page + increment === 3) {\n      if (!this.appSection.current.confirmDownload()) {\n        return;\n      }\n    }\n\n    const navPage = document.getElementById(\"NavPage\");\n    const appSection = document.getElementById(\"AppSection\");\n\n    if (increment > 0) {\n      navPage.className = \"exitLeft\";\n      appSection.className = \"exitLeft\";\n    } else if (increment < 0) {\n      navPage.className = \"exitRight\";\n      appSection.className = \"exitRight\";\n    }\n  }\n\n  setInvalidLocations(invalid) {\n    this.setState({ invalidLocations: invalid });\n  }\n\n  setInvalidIndicators(invalid) {\n    this.setState({ invalidIndicators: invalid });\n  }\n\n  setInvalidFileName(invalid) {\n    this.setState({ invalidFileName: invalid });\n  }\n\n  setInvalidFilePath(invalid) {\n    this.setState({ invalidFilePath: invalid });\n  }\n\n  incPage() {\n    console.log(\"inc\")\n    const { page } = this.state;\n\n    if (page + 1 === 5) {\n      this.appSection.current.reset();\n      this.setState({\n        page: 0,\n        invalidLocations: true,\n        invalidIndicators: true,\n        invalidFileName: true,\n        invalidFilePath: true,\n      });\n    } else {\n      this.setState({ page: page + 1 });\n    }\n  }\n\n  decPage() {\n    console.log(\"dec\")\n    const { page } = this.state;\n\n    if (page - 1 === -1) {\n      this.setState({ page: 0 });\n    } else {\n      this.setState({ page: page - 1 });\n    }\n  }\n\n  render() {\n    const {\n      page,\n      invalidLocations,\n      invalidIndicators,\n      invalidFileName,\n      invalidFilePath\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <AppHeader page={page} />\n        </div>\n\n        <div className=\"App-section\">\n          <AppSection\n            ref={this.appSection}\n            page={page}\n            onPageChange={this.handlePageChange}\n            setInvalidLocations={this.setInvalidLocations}\n            setInvalidIndicators={this.setInvalidIndicators}\n            invalidFileName={invalidFileName}\n            setInvalidFileName={this.setInvalidFileName}\n            invalidFilePath={invalidFilePath}\n            setInvalidFilePath={this.setInvalidFilePath}\n          />\n        </div>\n\n        <div className=\"App-footer\">\n          <AppFooter\n            page={page}\n            onPageChange={this.handlePageChange}\n            invalidLocations={invalidLocations}\n            invalidIndicators={invalidIndicators}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppHeader.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppSection.js",["97","98","99"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport LocationPage from \"./pages/LocationPage/LocationPage\";\r\nimport IndicatorPage from \"./pages/IndicatorPage/IndicatorPage\";\r\nimport ConfirmationPage from \"./pages/ConfirmationPage/ConfirmationPage\";\r\nimport LoadingPage from \"./pages/LoadingPage/LoadingPage\";\r\nimport GraphPage from \"./pages/GraphPage/GraphPage\";\r\nimport \"./css/AppSection.css\";\r\n\r\nconst electron = window.require(\"electron\");\r\nconst { ipcRenderer } = electron;\r\n\r\nclass AppSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      locationList: [],\r\n      indicatorList: [],\r\n      fileName: \"\",\r\n      filePath: ipcRenderer.send(\"GET_DOWNLOADS_PATH\"),\r\n      progress: 0,\r\n      progressDialog: \"Starting your download\",\r\n    };\r\n\r\n    this.setFileName = this.setFileName.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.confirmDownload = this.confirmDownload.bind(this);\r\n    this.addLocation = this.addLocation.bind(this);\r\n    this.removeLocation = this.removeLocation.bind(this);\r\n    this.addIndicator = this.addIndicator.bind(this);\r\n    this.removeIndicator = this.removeIndicator.bind(this);\r\n    this.startPythonScript = this.startPythonScript.bind(this);\r\n\r\n    const { onPageChange } = this.props;\r\n    ipcRenderer.on(\"MESSAGE_FROM_BACKGROUND_VIA_MAIN\", (event, args) => {\r\n      console.log(args);\r\n      const tmpMessage = args.split(\" \");\r\n      const newProgress = parseFloat(tmpMessage[tmpMessage.length - 1]) * 100;\r\n      const newDialog = tmpMessage.slice(0, tmpMessage.length - 1).join(\" \");\r\n\r\n      this.setState({ progress: newProgress, progressDialog: newDialog });\r\n      if (newProgress > 100) {\r\n        onPageChange(1);\r\n      }\r\n    });\r\n\r\n    ipcRenderer.on(\"RETURN_DIALOG\", (event, args) => {\r\n      if (args.filePath && args.filePath.length > 0) {\r\n        this.setState({ filePath: args.filePath });\r\n      }\r\n    });\r\n\r\n    ipcRenderer.on(\"RETURN_DOWNLOADS_PATH\", (event, args) => {\r\n      this.setState({ filePath: args.downloadsPath });\r\n    });\r\n  }\r\n\r\n  setFileName(name) {\r\n    const { setInvalidFileName } = this.props;\r\n    this.setState({ fileName: name });\r\n    setInvalidFileName(false);\r\n  }\r\n\r\n  reset() {\r\n    const {\r\n      setInvalidLocations,\r\n      setInvalidIndicators,\r\n      setInvalidFileName,\r\n      setInvalidFilePath\r\n    } = this.props;\r\n\r\n    setInvalidLocations(true);\r\n    setInvalidIndicators(true);\r\n    setInvalidFileName(false);\r\n    setInvalidFilePath(false);\r\n\r\n    this.setState({\r\n      locationList: [],\r\n      indicatorList: [],\r\n      fileName: \"\",\r\n      filePath: ipcRenderer.send(\"GET_DOWNLOADS_PATH\"),\r\n      progress: 0,\r\n      progressDialog: \"Starting your download\",\r\n    });\r\n  }\r\n\r\n  confirmDownload() {\r\n    const {\r\n      setInvalidFileName,\r\n      setInvalidFilePath\r\n    } = this.props;\r\n\r\n    const {\r\n      fileName,\r\n      filePath,\r\n    } = this.state;\r\n\r\n    if (fileName.length === 0) {\r\n      setInvalidFileName(true);\r\n      return false;\r\n    }\r\n    if (fileName.length === 0) {\r\n      setInvalidFilePath(true);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  addLocation(locationName, geographicLevel, primaryID, secondaryID) {\r\n    const { setInvalidLocations } = this.props;\r\n    const { locationList } = this.state;\r\n    const idx = locationList.findIndex(\r\n      (i) => (\r\n        i.geographicLevel === geographicLevel\r\n        && i.primaryID === primaryID\r\n        && i.secondaryID === secondaryID\r\n      ),\r\n    );\r\n    if (idx === -1) {\r\n      locationList.push({\r\n        locationName,\r\n        geographicLevel,\r\n        primaryID,\r\n        secondaryID,\r\n      });\r\n      this.setState({ locationList });\r\n    }\r\n    setInvalidLocations(false);\r\n  }\r\n\r\n  removeLocation(locationIdx) {\r\n    const { setInvalidLocations } = this.props;\r\n    const { locationList } = this.state;\r\n\r\n    if (locationList.length > locationIdx) {\r\n      locationList.splice(locationIdx, 1);\r\n      this.setState({ locationList });\r\n    }\r\n\r\n    if (locationList.length === 0) {\r\n      setInvalidLocations(true);\r\n    }\r\n  }\r\n\r\n  addIndicator(sectionIdx, tableIdx, tableName) {\r\n    const { setInvalidIndicators } = this.props;\r\n    const { indicatorList } = this.state;\r\n\r\n    const idx = indicatorList.findIndex(\r\n      (i) => i.sectionIdx === sectionIdx && i.tableIdx === tableIdx,\r\n    );\r\n\r\n    if (idx === -1) {\r\n      indicatorList.push({ tableName, sectionIdx, tableIdx });\r\n      this.setState({ indicatorList });\r\n    } else {\r\n      console.log(\"tried to add an indicator twice\");\r\n    }\r\n\r\n    console.log(\"Ind valid\");\r\n    setInvalidIndicators(false);\r\n  }\r\n\r\n  removeIndicator(sectionIdx, tableIdx) {\r\n    const { setInvalidIndicators } = this.props;\r\n    const { indicatorList } = this.state;\r\n\r\n    const idx = indicatorList.findIndex(\r\n      (i) => i.sectionIdx === sectionIdx && i.tableIdx === tableIdx,\r\n    );\r\n\r\n    if (idx !== -1) {\r\n      indicatorList.splice(idx, 1);\r\n      this.setState({ indicatorList });\r\n    }\r\n\r\n    console.log(indicatorList);\r\n\r\n    if (indicatorList.length === 0) {\r\n      console.log(\"Ind invalid\");\r\n      setInvalidIndicators(true);\r\n    }\r\n  }\r\n\r\n  startPythonScript() {\r\n    const {\r\n      locationList,\r\n      indicatorList,\r\n      fileName,\r\n      filePath,\r\n    } = this.state;\r\n\r\n    ipcRenderer.send(\"START_BACKGROUND_VIA_MAIN\", {\r\n      reportArea: locationList,\r\n      selectedIndicators: indicatorList,\r\n      options: { outputFile: `${filePath}\\\\${fileName}.xlsx` },\r\n    });\r\n\r\n    // ipcRenderer.send(\"FAKE_BACKGROUND_VIA_MAIN\");\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      page,\r\n      invalidFileName,\r\n      invalidFilePath,\r\n    } = this.props;\r\n\r\n    const {\r\n      locationList,\r\n      indicatorList,\r\n      fileName,\r\n      filePath,\r\n      progress,\r\n      progressDialog,\r\n    } = this.state;\r\n\r\n    let section;\r\n    if (page === 0) {\r\n      section = (\r\n        <LocationPage\r\n          locationList={locationList}\r\n          onAddLocation={this.addLocation}\r\n          onRemoveLocation={this.removeLocation}\r\n        />\r\n      );\r\n    } else if (page === 1) {\r\n      section = (\r\n        <IndicatorPage\r\n          indicatorList={indicatorList}\r\n          onAddIndicator={this.addIndicator}\r\n          onRemoveIndicator={this.removeIndicator}\r\n        />\r\n      );\r\n    } else if (page === 2) {\r\n      section = (\r\n        <ConfirmationPage\r\n          locationList={locationList}\r\n          indicatorList={indicatorList}\r\n          fileName={fileName}\r\n          filePath={filePath}\r\n          invalidFileName={invalidFileName}\r\n          invalidFilePath={invalidFilePath}\r\n          onFileNameChange={this.setFileName}\r\n        />\r\n      );\r\n    } else if (page === 3) {\r\n      section = (\r\n        <LoadingPage\r\n          progress={progress}\r\n          progressDialog={progressDialog}\r\n          onPageMount={this.startPythonScript}\r\n        />\r\n      );\r\n    } else if (page === 4) {\r\n      section = <GraphPage />;\r\n    }\r\n    return <div id=\"AppSection\">{section}</div>;\r\n  }\r\n}\r\n\r\nAppSection.propTypes = {\r\n  page: PropTypes.number,\r\n  onPageChange: PropTypes.func,\r\n  setInvalidLocations: PropTypes.func,\r\n  setInvalidIndicators: PropTypes.func,\r\n  invalidFileName: PropTypes.bool,\r\n  setInvalidFileName: PropTypes.func,\r\n  invalidFilePath: PropTypes.bool,\r\n  setInvalidFilePath: PropTypes.func,\r\n};\r\nAppSection.defaultProps = {\r\n  page: 0,\r\n  onPageChange: null,\r\n  setInvalidLocations: null,\r\n  setInvalidIndicators: null,\r\n  invalidFileName: false,\r\n  setInvalidFileName: null,\r\n  invalidFilePath: false,\r\n  setInvalidFilePath: null,\r\n};\r\n\r\nexport default AppSection;\r\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppFooter.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppNav.js",["100"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport \"./css/AppNav.css\";\n\nfunction AppNav(props) {\n  const { page } = props;\n  let title;\n\n  if (page === 0) {\n    title = \"Select Report Area\";\n  } else if (page === 1) {\n    title = \"Select Report Indicators\";\n  } else if (page === 2) {\n    title = \"Confirm Report\";\n  } else if (page === 4) {\n    title = \"Download Graphs\";\n  }\n\n  return (\n    <div id=\"AppNav\">\n      <div id=\"AppNavHeader\">\n        <h4 id=\"NavPage\">\n          {title}\n        </h4>\n      </div>\n    </div>\n  );\n}\n\nAppNav.propTypes = {\n  page: PropTypes.number,\n};\nAppNav.defaultProps = {\n  page: 0,\n};\n\nexport default AppNav;\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LoadingPage\\LoadingPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\LocationPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\GraphPage\\GraphPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\IndicatorPage.js",["101","102","103","104","105","106","107"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SectionAccordion from \"./subcomponents/SectionAccordion\";\r\nimport CheckBoxLabel from \"./subcomponents/CheckBoxLabel\";\r\nimport customTables from \"../../../assets/data/customTables.json\";\r\nimport \"../../css/IndicatorPage.css\";\r\n\r\nclass IndicatorPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let cbStates = {};\r\n    cbStates.all = false;\r\n    for (let i = 0; i < customTables.length; i += 1) {\r\n      cbStates[`${i}`] = {};\r\n      cbStates[`${i}`][\"-1\"] = false;\r\n      for (let j = 0; j < customTables[i].SectionTables.length; j += 1) {\r\n        cbStates[`${i}`][`${j}`] = false;\r\n      }\r\n    }\r\n\r\n    this.state = {\r\n      checkBoxStates: cbStates,\r\n    };\r\n\r\n    this.sectionAccordions = [];\r\n\r\n    this.handleTableChange = this.handleTableChange.bind(this);\r\n    this.handleStateChange = this.handleStateChange.bind(this);\r\n    this.onAllBoxClicked = this.onAllBoxClicked.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { indicatorList } = this.props;\r\n    const { checkBoxStates } = this.state;\r\n    indicatorList.forEach((indicator) => {\r\n      checkBoxStates[`${indicator.sectionIdx}`][`${indicator.tableIdx}`] = true;\r\n      this.setState({ checkBoxStates });\r\n    });\r\n\r\n    this.updateStates();\r\n  }\r\n\r\n  handleTableChange(sid, tid, checked) {\r\n    const { onAddIndicator, onRemoveIndicator } = this.props;\r\n\r\n    if (checked) {\r\n      const tableName = customTables[sid].SectionTables[tid].TableName;\r\n      onAddIndicator(sid, tid, tableName);\r\n    } else {\r\n      onRemoveIndicator(sid, tid);\r\n    }\r\n  }\r\n\r\n  handleStateChange(id, checked) {\r\n    const { checkBoxStates } = this.state;\r\n\r\n    const tmpIDs = id.split(\".\");\r\n    const sid = parseInt(tmpIDs[0], 10);\r\n    const tid = parseInt(tmpIDs[1], 10);\r\n\r\n    if (tid === -1) {\r\n      if (sid === -1) {\r\n        // All Indicators checkbox clicked. Change all checkboxes to match\r\n        checkBoxStates.all = checked\r\n      } else {\r\n        // Section checkbox clicked. Change all section checkboxes to match\r\n        checkBoxStates[sid][tid] = checked\r\n      }\r\n    } else {\r\n      // Indicator checkbox was clicked. Change checkbox to match\r\n      checkBoxStates[sid][tid] = checked\r\n      this.handleTableChange(sid, tid, checked)\r\n    }\r\n\r\n    this.setState({ checkBoxStates });\r\n    this.updateStates();\r\n  }\r\n\r\n  onAllBoxClicked(event) {\r\n    const { checkBoxStates } = this.state;\r\n\r\n    for (let i = 0; i < customTables.length; i += 1) {\r\n      if (checkBoxStates[i][\"-1\"] !== event.target.checked) {\r\n        checkBoxStates[i][\"-1\"] = event.target.checked;\r\n      }\r\n      for (let j = 0; j < customTables[i].SectionTables.length; j += 1) {\r\n        if (checkBoxStates[i][j] !== event.target.checked) {\r\n          this.handleStateChange(`${i}.${j}`, event.target.checked)\r\n        }\r\n      }\r\n    }\r\n\r\n    this.handleStateChange(\"-1.-1\", event.target.checked)\r\n  }\r\n\r\n  updateStates() {\r\n    const { checkBoxStates } = this.state;\r\n\r\n    let allChecked = true;\r\n    for (let i = 0; i < customTables.length; i += 1) {\r\n      let tableChecked = true;\r\n      for (let j = 0; j < customTables[i].SectionTables.length; j += 1) {\r\n        if (!checkBoxStates[i][j]) {\r\n          tableChecked = false;\r\n        }\r\n      }\r\n\r\n      if (tableChecked) {\r\n        checkBoxStates[i][\"-1\"] = true;\r\n      } else {\r\n        checkBoxStates[i][\"-1\"] = false;\r\n        allChecked = false;\r\n      }\r\n    }\r\n\r\n    if (allChecked) {\r\n      checkBoxStates.all = true;\r\n    } else {\r\n      checkBoxStates.all = false;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { checkBoxStates } = this.state;\r\n    this.sectionAccordions = [];\r\n\r\n    for (let i = 0; i < customTables.length; i += 1) {\r\n      const customSection = customTables[i];\r\n      this.sectionAccordions.push(\r\n        <SectionAccordion\r\n          key={`${i}`}\r\n          sid={`${i}`}\r\n          sectionInfo={customSection}\r\n          sectionStates={checkBoxStates[i]}\r\n          handleStateChange={this.handleStateChange}\r\n        />,\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div id=\"IndicatorPage\">\r\n        <CheckBoxLabel id=\"-1.-1\" name=\"All Tables\" checked={checkBoxStates.all} onClick={this.onAllBoxClicked} />\r\n        {this.sectionAccordions}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIndicatorPage.propTypes = {\r\n  indicatorList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      sectionIdx: PropTypes.number,\r\n      tableIdx: PropTypes.number,\r\n      tableName: PropTypes.string,\r\n    }),\r\n  ),\r\n  onAddIndicator: PropTypes.func,\r\n  onRemoveIndicator: PropTypes.func,\r\n};\r\nIndicatorPage.defaultProps = {\r\n  indicatorList: null,\r\n  onAddIndicator: null,\r\n  onRemoveIndicator: null,\r\n};\r\n\r\nexport default IndicatorPage;\r\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\ConfirmationPage\\ConfirmationPage.js",["108","109","110","111","112","113"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport { Col, Form, Row } from \"react-bootstrap\";\nimport \"../../css/ConfirmationPage.css\";\n\nconst electron = window.require(\"electron\");\nconst { ipcRenderer } = electron;\n\nclass ConfirmationPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    const { locationList, indicatorList } = this.props;\n    this.lList = [];\n    this.iList = [];\n\n    let itemID = 0;\n    locationList.forEach((location) => {\n      this.lList.push(\n        <ListGroup.Item action={false} eventKey={itemID} key={itemID}>\n          {location.locationName}\n        </ListGroup.Item>,\n      );\n      itemID += 1;\n    });\n\n    itemID = 0;\n    indicatorList.forEach((indicator) => {\n      this.iList.push(\n        <ListGroup.Item eventKey={itemID} key={itemID}>\n          {\n            indicator.tableName\n          }\n        </ListGroup.Item>,\n      );\n      itemID += 1;\n    });\n\n    this.dialog = this.dialog.bind(this);\n  }\n\n  onNameChange = (e) => {\n    const { onFileNameChange } = this.props;\n    onFileNameChange(e.target.value)\n  }\n\n  dialog() {\n    const { locationList } = this.props;\n    ipcRenderer.send(\"START_DIALOG\");\n  }\n\n  render() {\n    const { fileName, filePath, invalidFileName, invalidFilePath } = this.props;\n\n    return (\n      <div className=\"ConfirmationPage\">\n        <div className=\"ConfirmationTables\">\n          <Accordion id=\"locationConfTable\" defaultActiveKey=\"0\">\n            <Card>\n              <Card.Header id=\"ListHeader\">\n                <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\n                  Report Area\n                </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"0\">\n                <Card.Body id=\"ConfirmationList\">\n                  <ListGroup variant=\"flush\" activeKey=\"-1\" id=\"ConfLocListGroup\">\n                    {this.lList}\n                  </ListGroup>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n          <Accordion id=\"indicatorConfTable\" defaultActiveKey=\"0\">\n            <Card>\n              <Card.Header id=\"ListHeader\">\n                <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\n                  Selected Tables\n                </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"0\">\n                <Card.Body id=\"ConfirmationList\">\n                  <ListGroup variant=\"flush\" activeKey=\"-1\">\n                    {this.iList}\n                  </ListGroup>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n        </div>\n        <Form id=\"ConfirmationForm\">\n          <Form.Group as={Row}>\n            <Form.Label column sm={1} htmlFor=\"fileName\">Name:</Form.Label>\n            <Col sm={11}>\n              <InputGroup hasValidation>\n                <FormControl\n                  required\n                  id=\"fileName\"\n                  placeholder=\"Enter a file name...\"\n                  onChange={this.onNameChange}\n                  isInvalid={invalidFileName}\n                />\n                <InputGroup.Append>\n                  <InputGroup.Text>.xlsx</InputGroup.Text>\n                </InputGroup.Append>\n                <Form.Control.Feedback type=\"invalid\">\n                  Please choose a file name\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={1} htmlFor=\"filePath\">Path:</Form.Label>\n            <Col sm={11}>\n              <InputGroup hasValidation>\n                <FormControl\n                  required\n                  id=\"filePath\"\n                  placeholder={filePath}\n                  value={filePath}\n                  isInvalid={false}\n                />\n                <InputGroup.Append>\n                  <Button onClick={this.dialog}>Choose...</Button>\n                </InputGroup.Append>\n                <Form.Control.Feedback type=\"invalid\">\n                  Please choose a file path\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Col>\n          </Form.Group>\n        </Form>\n      </div>\n    );\n  }\n}\n\nConfirmationPage.propTypes = {\n  locationList: PropTypes.arrayOf(\n    PropTypes.shape({\n      locationName: PropTypes.string,\n      geographicLevel: PropTypes.string,\n      primaryID: PropTypes.string,\n      secondaryID: PropTypes.string,\n    }),\n  ),\n  indicatorList: PropTypes.arrayOf(\n    PropTypes.shape({\n      indicatorIdx: PropTypes.number,\n      sectionIdx: PropTypes.number,\n      tableIdx: PropTypes.number,\n    }),\n  ),\n  fileName: PropTypes.string,\n  filePath: PropTypes.string,\n  invalidFileName: PropTypes.bool,\n  invalidFilePath: PropTypes.bool,\n  onFileNameChange: PropTypes.func,\n};\nConfirmationPage.defaultProps = {\n  locationList: null,\n  indicatorList: null,\n  fileName: \"\",\n  filePath: \"\",\n  invalidFileName: false,\n  invalidFilePath: false,\n  onFileNameChange: null,\n};\n\nexport default ConfirmationPage;\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectionTable.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectorTable.js",["114","115","116","117","118","119","120","121","122"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nclass SelectorTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    // put each state name into the listgroup\n    this.primaryList = [];\n    this.filteredPrimaryList = [];\n    this.secondaryList = [];\n    this.filteredSecondaryList = [];\n    this.hideAll = true;\n    const { locations } = this.props;\n    let itemID = 0;\n    locations.forEach((location) => {\n      this.primaryList.push(\n        <ListGroup.Item\n          action\n          eventKey={itemID}\n          key={itemID}\n          onClick={(e) => this.onPrimaryListClick(e)}\n        >\n          {location.StateName}\n        </ListGroup.Item>\n      );\n      itemID += 1;\n    });\n    this.filteredPrimaryList = this.primaryList;\n\n    this.formFilter = React.createRef();\n\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.handleResetClick = this.handleResetClick.bind(this);\n    this.onSecondayListClick = this.onSecondaryListClick.bind(this);\n    this.onPrimaryListClick = this.onPrimaryListClick.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions, true);\n    this.updateDimensions();\n  }\n\n  componentDidUpdate() {\n    this.updateDimensions();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions, true);\n  }\n\n  handleFilterReset() {\n    this.formFilter.current.value = \"\";\n    this.filteredPrimaryList = this.primaryList;\n  }\n\n  handleFilterChange(event) {\n    const { activeList } = this.props;\n    const filter = event.target.value.toUpperCase();\n\n    if (activeList === \"0\") {\n      this.filteredPrimaryList = [];\n      this.primaryList.forEach((location) => {\n        const item = location.props.children.toUpperCase();\n        if (item.indexOf(filter) >= 0) {\n          this.filteredPrimaryList.push(location);\n        }\n      });\n    } else {\n      this.filteredSecondaryList = [];\n      this.secondaryList.forEach((location) => {\n        const item = location.props.children.toUpperCase();\n        if (item.indexOf(filter) >= 0) {\n          this.filteredSecondaryList.push(location);\n        }\n      });\n    }\n    this.forceUpdate();\n  }\n\n  handleResetClick() {\n    const { onCloseSecondary } = this.props;\n    this.handleFilterReset();\n    onCloseSecondary();\n  }\n\n  onSecondaryListClick(event) {\n    const { level, setCountyIdx, setPlaceIdx, onDoubleClick } = this.props;\n\n    const tmpSecondaryIdx = event.target.attributes[0].value;\n\n    if (level === \"County\") {\n      setCountyIdx(tmpSecondaryIdx);\n    } else if (level === \"Place\") {\n      setPlaceIdx(tmpSecondaryIdx);\n    }\n\n    if (event.detail === 2) {\n      onDoubleClick();\n    }\n  }\n\n  onPrimaryListClick(event) {\n    const tmpStateIdx = event.target.attributes[0].value;\n    const { level, onOpenSecondary, setStateIdx, onDoubleClick } = this.props;\n\n    // set the stateIdx\n    setStateIdx(tmpStateIdx);\n\n    if (level !== \"State\") {\n      const { locations } = this.props;\n\n      // change the primaryList title\n      onOpenSecondary(locations[tmpStateIdx].StateName);\n      this.handleFilterReset();\n\n      // create secondaryList\n      this.secondaryList = [];\n      let tmpSecondary = null;\n      let itemID = 0;\n      if (level === \"County\") {\n        tmpSecondary = locations[tmpStateIdx].Counties;\n        tmpSecondary.forEach((secondary) => {\n          this.secondaryList.push(\n            <ListGroup.Item\n              action\n              eventKey={itemID}\n              key={itemID}\n              onClick={(e) => this.onSecondaryListClick(e)}\n            >\n              {secondary.CountyName}\n            </ListGroup.Item>,\n          );\n          itemID += 1;\n        });\n      } else if (level === \"Place\") {\n        tmpSecondary = locations[tmpStateIdx].Places;\n        tmpSecondary.forEach((secondary) => {\n          this.secondaryList.push(\n            <ListGroup.Item\n              action\n              eventKey={itemID}\n              key={itemID}\n              onClick={(e) => this.onSecondaryListClick(e)}\n            >\n              {secondary.PlaceName}\n            </ListGroup.Item>,\n          );\n          itemID += 1;\n        });\n      }\n      this.filteredSecondaryList = this.secondaryList;\n    } else {\n      if (event.detail === 2) {\n        onDoubleClick();\n      }\n    }\n  }\n\n  updateDimensions() {\n    const { level } = this.props;\n    console.log(\"updating selectorTable dimensions\")\n    const SelectorHeader = document.getElementById(\"SelectorAccordionHeader\").clientHeight;\n    // console.log(SelectorHeader);\n    // const SelectorBody = document.getElementById(\"SelectorList\").clientHeight;\n    // console.log(SelectorBody);\n\n    const SelectionHeader = document.getElementById(\"SelectionAccordionHeader\").clientHeight;\n    // console.log(SelectionHeader);\n    const SelectionBody = document.getElementById(\"SelectionList\").clientHeight;\n    // console.log(SelectionBody);\n\n    const targetHeight = (SelectionHeader + SelectionBody) - SelectorHeader;\n    // console.log(targetHeight);\n    document.getElementById(\"SelectorList\").style.height = `${targetHeight}px`;\n  }\n\n  render() {\n    // build the selectorTable\n    const {\n      level,\n      activeList,\n      primaryTitle,\n      secondaryTitle,\n      activePrimaryItem,\n      activeSecondaryItem,\n    } = this.props;\n\n    console.log(\"rendering selector table\");\n\n    let resetStateButton = (\n      <Button id=\"ResetStateButton\" onClick={this.handleResetClick}>\n        Reset\n      </Button>\n    );\n\n    let listGroupItems;\n    let activeItem;\n    if (activeList === \"0\") {\n      listGroupItems = this.filteredPrimaryList;\n      activeItem = activePrimaryItem;\n    } else {\n      listGroupItems = this.filteredSecondaryList;\n      activeItem = activeSecondaryItem;\n    }\n\n    return (\n      <div id=\"SelectorTable\">\n        <Accordion defaultActiveKey=\"0\" activeKey=\"0\">\n          <Card>\n            <Card.Header id=\"SelectorAccordionHeader\">\n              <Accordion.Toggle as=\"span\" eventKey=\"0\">\n                <div id=\"SelectorHeader\">\n                  <div id=\"SelectorPrimaryHeader\">\n                    {primaryTitle}\n                    {activeList !== \"0\" ? resetStateButton : null}\n                  </div>\n                  {activeList !== \"0\" ? secondaryTitle : null}\n                  <FormControl\n                    ref={this.formFilter}\n                    onKeyUp={(e) => this.handleFilterChange(e)}\n                    placeholder=\"filter...\"\n                  />\n                </div>\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body id=\"SelectorList\">\n                <ListGroup variant=\"flush\" activeKey={activeItem}>\n                  {listGroupItems}\n                </ListGroup>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </div>\n    );\n  }\n}\n\nSelectorTable.propTypes = {\n  level: PropTypes.string,\n  activeList: PropTypes.string,\n  primaryTitle: PropTypes.string,\n  secondaryTitle: PropTypes.string,\n  onOpenSecondary: PropTypes.func,\n  onCloseSecondary: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  activePrimaryItem: PropTypes.string,\n  activeSecondaryItem: PropTypes.string,\n  setStateIdx: PropTypes.func,\n  setCountyIdx: PropTypes.func,\n  setPlaceIdx: PropTypes.func,\n  locations: PropTypes.arrayOf(\n    PropTypes.shape({\n      StateName: PropTypes.string,\n      StateID: PropTypes.string,\n      Counties: PropTypes.arrayOf(\n        PropTypes.shape({\n          CountyName: PropTypes.string,\n          CountyID: PropTypes.string,\n        }),\n      ),\n      Places: PropTypes.arrayOf(\n        PropTypes.shape({\n          PlaceName: PropTypes.string,\n          PlaceID: PropTypes.string,\n        }),\n      ),\n    }),\n  ),\n};\nSelectorTable.defaultProps = {\n  level: \"State\",\n  activeList: \"0\",\n  primaryTitle: \"Select a state\",\n  secondaryTitle: \"Select a state above\",\n  onOpenSecondary: null,\n  onCloseSecondary: null,\n  onDoubleClick: null,\n  activePrimaryItem: null,\n  activeSecondaryItem: null,\n  setStateIdx: null,\n  setCountyIdx: null,\n  setPlaceIdx: null,\n  locations: null,\n};\n\nexport default SelectorTable;\n",["123","124","125","126","127","128"],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\LocationLevelButtons.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\SectionAccordion.js",["129","130","131","132","133"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport CheckBoxLabel from \"./CheckBoxLabel\";\r\nimport \"../../../css/IndicatorPage.css\";\r\n\r\nclass SectionAccordion extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { activeKey: \"1\" };\r\n\r\n    this.onAccordionToggleClicked = this.onAccordionToggleClicked.bind(this);\r\n    this.onSectionBoxClicked = this.onSectionBoxClicked.bind(this);\r\n    this.onTableBoxClicked = this.onTableBoxClicked.bind(this);\r\n  }\r\n\r\n  onAccordionToggleClicked() {\r\n    const { activeKey } = this.state;\r\n\r\n    if (activeKey === \"0\") {\r\n      this.setState({ activeKey: \"1\" });\r\n    } else {\r\n      this.setState({ activeKey: \"0\" });\r\n    }\r\n  }\r\n\r\n  onSectionBoxClicked(event) {\r\n    this.setState({ activeKey: \"0\" });\r\n\r\n    const { sid, sectionInfo, sectionStates, handleStateChange } = this.props;\r\n    handleStateChange(event.target.id, event.target.checked);\r\n\r\n    for (let i = 0; i < sectionInfo.SectionTables.length; i += 1) {\r\n      if (sectionStates[i] !== event.target.checked) {\r\n        handleStateChange(`${sid}.${i}`, event.target.checked);\r\n      }\r\n    }\r\n  }\r\n\r\n  onTableBoxClicked(event) {\r\n    const { sid, sectionInfo, sectionStates, handleStateChange } = this.props;\r\n    handleStateChange(event.target.id, event.target.checked);\r\n\r\n    let sectionChecked = true;\r\n    for (let i = 0; i < sectionInfo.SectionTables.length; i += 1) {\r\n      if (!sectionStates[i]) {\r\n        sectionChecked = false;\r\n      }\r\n    }\r\n\r\n    if (sectionChecked !== sectionStates[\"-1\"]) {\r\n      handleStateChange(`${sid}.-1`, sectionChecked);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { sid, sectionInfo, sectionStates } = this.props;\r\n    const { activeKey } = this.state;\r\n    const sectionTables = [];\r\n    for (let i = 0; i < sectionInfo.SectionTables.length; i += 1) {\r\n      const table = sectionInfo.SectionTables[i];\r\n      sectionTables.push(\r\n        <CheckBoxLabel\r\n          key={`${sid}.${i}`}\r\n          id={`${sid}.${i}`}\r\n          name={table.TableName}\r\n          checked={sectionStates[i]}\r\n          onClick={this.onTableBoxClicked}\r\n        />,\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"SectionAccordion\">\r\n        <Accordion activeKey={activeKey}>\r\n          <Card>\r\n            <Card.Header id=\"indicatorHeader\">\r\n              <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\" onClick={this.onAccordionToggleClicked}>\r\n                <CheckBoxLabel\r\n                  id={`${sid}.-1`}\r\n                  name={sectionInfo.SectionName}\r\n                  checked={sectionStates[\"-1\"]}\r\n                  onClick={this.onSectionBoxClicked}\r\n                />\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>{sectionTables}</Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSectionAccordion.propTypes = {\r\n  sid: PropTypes.string,\r\n  sectionInfo: PropTypes.shape({\r\n    SectionName: PropTypes.string,\r\n    SectionTables: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        TableName: PropTypes.string,\r\n        TableIndicators: PropTypes.arrayOf(\r\n          PropTypes.shape({\r\n            IndicatorName: PropTypes.string,\r\n            IndicatorFormula: PropTypes.arrayOf(\r\n              PropTypes.string,\r\n            ),\r\n          }),\r\n        ),\r\n      }),\r\n    ),\r\n  }),\r\n  sectionStates: PropTypes.arrayOf(\r\n    PropTypes.bool,\r\n  ),\r\n  handleStateChange: PropTypes.func,\r\n};\r\nSectionAccordion.defaultProps = {\r\n  sid: null,\r\n  sectionInfo: null,\r\n  sectionStates: null,\r\n  handleStateChange: null,\r\n};\r\n\r\nexport default SectionAccordion;\r\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\CheckBoxLabel.js",["134","135"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../../../css/IndicatorPage.css\";\r\n\r\nclass CheckBoxLabel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { id, name, checked, onClick } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <label htmlFor={id} className=\"CheckBoxLabel\">\r\n          <input\r\n            type=\"checkbox\"\r\n            name={name}\r\n            id={id}\r\n            className=\"checkBoxLabel\"\r\n            checked={checked}\r\n            onChange={onClick}\r\n          />\r\n          {name}\r\n        </label>\r\n        <br />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nCheckBoxLabel.propTypes = {\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  checked: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n};\r\nCheckBoxLabel.defaultProps = {\r\n  id: null,\r\n  name: null,\r\n  checked: false,\r\n  onClick: null,\r\n};\r\n\r\nexport default CheckBoxLabel;\r\n",{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":8,"column":7,"nodeType":"150","messageId":"151","endLine":8,"endColumn":11},{"ruleId":"148","severity":1,"message":"152","line":37,"column":47,"nodeType":"150","messageId":"151","endLine":37,"endColumn":48},{"ruleId":"148","severity":1,"message":"152","line":52,"column":50,"nodeType":"150","messageId":"151","endLine":52,"endColumn":51},{"ruleId":"148","severity":1,"message":"153","line":68,"column":7,"nodeType":"150","messageId":"151","endLine":68,"endColumn":23},{"ruleId":"148","severity":1,"message":"154","line":69,"column":7,"nodeType":"150","messageId":"151","endLine":69,"endColumn":24},{"ruleId":"148","severity":1,"message":"155","line":70,"column":7,"nodeType":"150","messageId":"151","endLine":70,"endColumn":22},{"ruleId":"148","severity":1,"message":"156","line":71,"column":7,"nodeType":"150","messageId":"151","endLine":71,"endColumn":22},{"ruleId":"157","severity":1,"message":"158","line":71,"column":22,"nodeType":"159","messageId":"160","endLine":72,"endColumn":1,"fix":"161"},{"ruleId":"162","severity":1,"message":"163","line":109,"column":23,"nodeType":"164","messageId":"165","endLine":110,"endColumn":1,"fix":"166"},{"ruleId":"162","severity":1,"message":"163","line":127,"column":23,"nodeType":"164","messageId":"165","endLine":128,"endColumn":1,"fix":"167"},{"ruleId":"157","severity":1,"message":"158","line":143,"column":22,"nodeType":"159","messageId":"160","endLine":144,"endColumn":1,"fix":"168"},{"ruleId":"157","severity":1,"message":"158","line":69,"column":25,"nodeType":"159","messageId":"160","endLine":70,"endColumn":1,"fix":"169"},{"ruleId":"157","severity":1,"message":"158","line":90,"column":25,"nodeType":"159","messageId":"160","endLine":91,"endColumn":1,"fix":"170"},{"ruleId":"148","severity":1,"message":"171","line":95,"column":7,"nodeType":"150","messageId":"151","endLine":95,"endColumn":15},{"ruleId":"148","severity":1,"message":"172","line":3,"column":8,"nodeType":"150","messageId":"151","endLine":3,"endColumn":19},{"ruleId":"173","severity":1,"message":"174","line":12,"column":9,"nodeType":"150","messageId":"175","endLine":12,"endColumn":17,"fix":"176"},{"ruleId":"162","severity":1,"message":"163","line":65,"column":37,"nodeType":"164","messageId":"165","endLine":66,"endColumn":1,"fix":"177"},{"ruleId":"162","severity":1,"message":"163","line":68,"column":43,"nodeType":"164","messageId":"165","endLine":69,"endColumn":1,"fix":"178"},{"ruleId":"162","severity":1,"message":"163","line":72,"column":41,"nodeType":"164","messageId":"165","endLine":73,"endColumn":1,"fix":"179"},{"ruleId":"162","severity":1,"message":"163","line":73,"column":48,"nodeType":"164","messageId":"165","endLine":74,"endColumn":1,"fix":"180"},{"ruleId":"162","severity":1,"message":"163","line":89,"column":68,"nodeType":"164","messageId":"165","endLine":90,"endColumn":1,"fix":"181"},{"ruleId":"162","severity":1,"message":"163","line":94,"column":58,"nodeType":"164","messageId":"165","endLine":95,"endColumn":1,"fix":"182"},{"ruleId":"162","severity":1,"message":"163","line":51,"column":37,"nodeType":"164","messageId":"165","endLine":52,"endColumn":1,"fix":"183"},{"ruleId":"148","severity":1,"message":"184","line":55,"column":13,"nodeType":"150","messageId":"151","endLine":55,"endColumn":25},{"ruleId":"185","severity":1,"message":"186","line":60,"column":11,"nodeType":"187","messageId":"188","endLine":60,"endColumn":12,"fix":"189"},{"ruleId":"148","severity":1,"message":"190","line":60,"column":13,"nodeType":"150","messageId":"151","endLine":60,"endColumn":21},{"ruleId":"148","severity":1,"message":"156","line":60,"column":50,"nodeType":"150","messageId":"151","endLine":60,"endColumn":65},{"ruleId":"185","severity":1,"message":"191","line":60,"column":66,"nodeType":"187","messageId":"192","endLine":60,"endColumn":67,"fix":"193"},{"ruleId":"157","severity":1,"message":"158","line":31,"column":26,"nodeType":"194","messageId":"160","endLine":32,"endColumn":1,"fix":"195"},{"ruleId":"185","severity":1,"message":"186","line":95,"column":11,"nodeType":"187","messageId":"188","endLine":95,"endColumn":12,"fix":"196"},{"ruleId":"185","severity":1,"message":"191","line":95,"column":61,"nodeType":"187","messageId":"192","endLine":95,"endColumn":62,"fix":"197"},{"ruleId":"185","severity":1,"message":"186","line":112,"column":11,"nodeType":"187","messageId":"188","endLine":112,"endColumn":12,"fix":"198"},{"ruleId":"185","severity":1,"message":"191","line":112,"column":64,"nodeType":"187","messageId":"192","endLine":112,"endColumn":65,"fix":"199"},{"ruleId":"148","severity":1,"message":"200","line":168,"column":13,"nodeType":"150","messageId":"151","endLine":168,"endColumn":18},{"ruleId":"162","severity":1,"message":"163","line":169,"column":53,"nodeType":"164","messageId":"165","endLine":170,"endColumn":1,"fix":"201"},{"ruleId":"148","severity":1,"message":"200","line":188,"column":7,"nodeType":"150","messageId":"151","endLine":188,"endColumn":12},{"ruleId":"173","severity":1,"message":"202","line":198,"column":9,"nodeType":"150","messageId":"175","endLine":198,"endColumn":25,"fix":"203"},{"ruleId":"136","replacedBy":"204"},{"ruleId":"138","replacedBy":"205"},{"ruleId":"140","replacedBy":"206"},{"ruleId":"142","replacedBy":"207"},{"ruleId":"144","replacedBy":"208"},{"ruleId":"146","replacedBy":"209"},{"ruleId":"148","severity":1,"message":"210","line":5,"column":10,"nodeType":"150","messageId":"151","endLine":5,"endColumn":16},{"ruleId":"185","severity":1,"message":"186","line":32,"column":11,"nodeType":"187","messageId":"188","endLine":32,"endColumn":12,"fix":"211"},{"ruleId":"185","severity":1,"message":"191","line":32,"column":64,"nodeType":"187","messageId":"192","endLine":32,"endColumn":65,"fix":"212"},{"ruleId":"185","severity":1,"message":"186","line":43,"column":11,"nodeType":"187","messageId":"188","endLine":43,"endColumn":12,"fix":"213"},{"ruleId":"185","severity":1,"message":"191","line":43,"column":64,"nodeType":"187","messageId":"192","endLine":43,"endColumn":65,"fix":"214"},{"ruleId":"185","severity":1,"message":"186","line":12,"column":11,"nodeType":"187","messageId":"188","endLine":12,"endColumn":12,"fix":"215"},{"ruleId":"185","severity":1,"message":"191","line":12,"column":40,"nodeType":"187","messageId":"192","endLine":12,"endColumn":41,"fix":"216"},"global-require",[],"lines-around-directive",["217"],"no-spaced-func",["218"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'path' is assigned a value but never used.","Identifier","unusedVar","'e' is defined but never used.","'invalidLocations' is assigned a value but never used.","'invalidIndicators' is assigned a value but never used.","'invalidFileName' is assigned a value but never used.","'invalidFilePath' is assigned a value but never used.","comma-dangle","Missing trailing comma.","Property","missing",{"range":"219","text":"220"},"semi","Missing semicolon.","ExpressionStatement","missingSemi",{"range":"221","text":"222"},{"range":"223","text":"222"},{"range":"224","text":"220"},{"range":"225","text":"220"},{"range":"226","text":"220"},"'filePath' is assigned a value but never used.","'ProgressBar' is defined but never used.","prefer-const","'cbStates' is never reassigned. Use 'const' instead.","useConst",{"range":"227","text":"228"},{"range":"229","text":"222"},{"range":"230","text":"222"},{"range":"231","text":"222"},{"range":"232","text":"222"},{"range":"233","text":"222"},{"range":"234","text":"222"},{"range":"235","text":"222"},"'locationList' is assigned a value but never used.","object-curly-newline","Expected a line break after this opening brace.","ObjectPattern","expectedLinebreakAfterOpeningBrace",{"range":"236","text":"237"},"'fileName' is assigned a value but never used.","Expected a line break before this closing brace.","expectedLinebreakBeforeClosingBrace",{"range":"238","text":"237"},"JSXElement",{"range":"239","text":"220"},{"range":"240","text":"237"},{"range":"241","text":"237"},{"range":"242","text":"237"},{"range":"243","text":"237"},"'level' is assigned a value but never used.",{"range":"244","text":"222"},"'resetStateButton' is never reassigned. Use 'const' instead.",{"range":"245","text":"246"},[],["217"],["218"],[],[],[],"'Button' is defined but never used.",{"range":"247","text":"237"},{"range":"248","text":"237"},{"range":"249","text":"237"},{"range":"250","text":"237"},{"range":"251","text":"237"},{"range":"252","text":"237"},"padding-line-between-statements","func-call-spacing",[2298,2298],",",[3174,3174],";",[3551,3551],[3842,3842],[2371,2371],[2849,2849],[396,414],"const cbStates = {};",[1996,1996],[2133,2133],[2265,2265],[2314,2314],[2861,2861],[2949,2949],[1407,1407],[1534,1534],"\n",[1588,1588],[952,952],[2706,2706],[2755,2755],[3144,3144],[3196,3196],[4778,4778],[5720,5850],"const resetStateButton = (\n      <Button id=\"ResetStateButton\" onClick={this.handleResetClick}>\n        Reset\n      </Button>\n    );",[945,945],[997,997],[1333,1333],[1385,1385],[253,253],[281,281]]