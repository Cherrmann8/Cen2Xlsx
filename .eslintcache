[{"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\index.js":"1","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\App.js":"2","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppHeader.js":"4","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppSection.js":"5","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppFooter.js":"6","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppNav.js":"7","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LoadingPage\\LoadingPage.js":"8","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\LocationPage.js":"9","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\GraphPage\\GraphPage.js":"10","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\IndicatorPage.js":"11","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\ConfirmationPage\\ConfirmationPage.js":"12","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectionTable.js":"13","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectorTable.js":"14","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\LocationLevelButtons.js":"15","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\SectionAccordion.js":"16","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\CheckBoxLabel.js":"17"},{"size":449,"mtime":1616093647498,"results":"18","hashOfConfig":"19"},{"size":4462,"mtime":1619195800153,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1616095002193,"results":"21","hashOfConfig":"19"},{"size":529,"mtime":1614807223692,"results":"22","hashOfConfig":"19"},{"size":9114,"mtime":1619196218424,"results":"23","hashOfConfig":"19"},{"size":3144,"mtime":1619195857506,"results":"24","hashOfConfig":"19"},{"size":662,"mtime":1618934184272,"results":"25","hashOfConfig":"19"},{"size":945,"mtime":1617284606343,"results":"26","hashOfConfig":"19"},{"size":7577,"mtime":1617288315744,"results":"27","hashOfConfig":"19"},{"size":334,"mtime":1617725156338,"results":"28","hashOfConfig":"19"},{"size":4749,"mtime":1618934472333,"results":"29","hashOfConfig":"19"},{"size":5468,"mtime":1619194043425,"results":"30","hashOfConfig":"19"},{"size":2322,"mtime":1617294300679,"results":"31","hashOfConfig":"19"},{"size":8285,"mtime":1618934780940,"results":"32","hashOfConfig":"19"},{"size":1316,"mtime":1614807223889,"results":"33","hashOfConfig":"19"},{"size":3889,"mtime":1618934630993,"results":"34","hashOfConfig":"19"},{"size":979,"mtime":1618934563563,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"19hsamx",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\index.js",[],["74","75","76","77","78","79"],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\App.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppHeader.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppSection.js",["80","81"],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppFooter.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\AppNav.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LoadingPage\\LoadingPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\LocationPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\GraphPage\\GraphPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\IndicatorPage.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\ConfirmationPage\\ConfirmationPage.js",["82","83","84"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport { Col, Form, Row } from \"react-bootstrap\";\nimport \"../../css/ConfirmationPage.css\";\n\nconst electron = window.require(\"electron\");\nconst { ipcRenderer } = electron;\n\nclass ConfirmationPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    const { locationList, indicatorList } = this.props;\n    this.lList = [];\n    this.iList = [];\n\n    let itemID = 0;\n    locationList.forEach((location) => {\n      this.lList.push(\n        <ListGroup.Item action={false} eventKey={itemID} key={itemID}>\n          {location.locationName}\n        </ListGroup.Item>,\n      );\n      itemID += 1;\n    });\n\n    itemID = 0;\n    indicatorList.forEach((indicator) => {\n      this.iList.push(\n        <ListGroup.Item eventKey={itemID} key={itemID}>\n          {\n            indicator.tableName\n          }\n        </ListGroup.Item>,\n      );\n      itemID += 1;\n    });\n\n    this.dialog = this.dialog.bind(this);\n  }\n\n  onNameChange = (e) => {\n    const { onFileNameChange } = this.props;\n    onFileNameChange(e.target.value);\n  }\n\n  dialog() {\n    const { locationList } = this.props;\n    ipcRenderer.send(\"START_DIALOG\");\n  }\n\n  render() {\n    const {\n      fileName,\n      filePath,\n      invalidFileName,\n      invalidFilePath,\n    } = this.props;\n\n    return (\n      <div className=\"ConfirmationPage\">\n        <div className=\"ConfirmationTables\">\n          <Accordion id=\"locationConfTable\" defaultActiveKey=\"0\">\n            <Card>\n              <Card.Header id=\"ListHeader\">\n                <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\n                  Report Area\n                </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"0\">\n                <Card.Body id=\"ConfirmationList\">\n                  <ListGroup variant=\"flush\" activeKey=\"-1\" id=\"ConfLocListGroup\">\n                    {this.lList}\n                  </ListGroup>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n          <Accordion id=\"indicatorConfTable\" defaultActiveKey=\"0\">\n            <Card>\n              <Card.Header id=\"ListHeader\">\n                <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\n                  Selected Tables\n                </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"0\">\n                <Card.Body id=\"ConfirmationList\">\n                  <ListGroup variant=\"flush\" activeKey=\"-1\">\n                    {this.iList}\n                  </ListGroup>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n        </div>\n        <Form id=\"ConfirmationForm\">\n          <Form.Group as={Row}>\n            <Form.Label column sm={1} htmlFor=\"fileName\">Name:</Form.Label>\n            <Col sm={11}>\n              <InputGroup hasValidation>\n                <FormControl\n                  required\n                  id=\"fileName\"\n                  placeholder=\"Enter a file name...\"\n                  onChange={this.onNameChange}\n                  isInvalid={invalidFileName}\n                />\n                <InputGroup.Append>\n                  <InputGroup.Text>.xlsx</InputGroup.Text>\n                </InputGroup.Append>\n                <Form.Control.Feedback type=\"invalid\">\n                  Please choose a file name\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={1} htmlFor=\"filePath\">Path:</Form.Label>\n            <Col sm={11}>\n              <InputGroup hasValidation>\n                <FormControl\n                  required\n                  id=\"filePath\"\n                  placeholder={filePath}\n                  value={filePath}\n                  isInvalid={false}\n                />\n                <InputGroup.Append>\n                  <Button onClick={this.dialog}>Choose...</Button>\n                </InputGroup.Append>\n                <Form.Control.Feedback type=\"invalid\">\n                  Please choose a file path\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Col>\n          </Form.Group>\n        </Form>\n      </div>\n    );\n  }\n}\n\nConfirmationPage.propTypes = {\n  locationList: PropTypes.arrayOf(\n    PropTypes.shape({\n      locationName: PropTypes.string,\n      geographicLevel: PropTypes.string,\n      primaryID: PropTypes.string,\n      secondaryID: PropTypes.string,\n    }),\n  ),\n  indicatorList: PropTypes.arrayOf(\n    PropTypes.shape({\n      indicatorIdx: PropTypes.number,\n      sectionIdx: PropTypes.number,\n      tableIdx: PropTypes.number,\n    }),\n  ),\n  fileName: PropTypes.string,\n  filePath: PropTypes.string,\n  invalidFileName: PropTypes.bool,\n  invalidFilePath: PropTypes.bool,\n  onFileNameChange: PropTypes.func,\n};\nConfirmationPage.defaultProps = {\n  locationList: null,\n  indicatorList: null,\n  fileName: \"\",\n  filePath: \"\",\n  invalidFileName: false,\n  invalidFilePath: false,\n  onFileNameChange: null,\n};\n\nexport default ConfirmationPage;\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectionTable.js",[],["85","86","87","88","89","90"],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\SelectorTable.js",["91"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nclass SelectorTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    // put each state name into the listgroup\n    this.primaryList = [];\n    this.filteredPrimaryList = [];\n    this.secondaryList = [];\n    this.filteredSecondaryList = [];\n    this.hideAll = true;\n    const { locations } = this.props;\n    let itemID = 0;\n    locations.forEach((location) => {\n      this.primaryList.push(\n        <ListGroup.Item\n          action\n          eventKey={itemID}\n          key={itemID}\n          onClick={(e) => this.onPrimaryListClick(e)}\n        >\n          {location.StateName}\n        </ListGroup.Item>,\n      );\n      itemID += 1;\n    });\n    this.filteredPrimaryList = this.primaryList;\n\n    this.formFilter = React.createRef();\n\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.handleResetClick = this.handleResetClick.bind(this);\n    this.onSecondayListClick = this.onSecondaryListClick.bind(this);\n    this.onPrimaryListClick = this.onPrimaryListClick.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions, true);\n    this.updateDimensions();\n  }\n\n  componentDidUpdate() {\n    this.updateDimensions();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions, true);\n  }\n\n  handleFilterReset() {\n    this.formFilter.current.value = \"\";\n    this.filteredPrimaryList = this.primaryList;\n  }\n\n  handleFilterChange(event) {\n    const { activeList } = this.props;\n    const filter = event.target.value.toUpperCase();\n\n    if (activeList === \"0\") {\n      this.filteredPrimaryList = [];\n      this.primaryList.forEach((location) => {\n        const item = location.props.children.toUpperCase();\n        if (item.indexOf(filter) >= 0) {\n          this.filteredPrimaryList.push(location);\n        }\n      });\n    } else {\n      this.filteredSecondaryList = [];\n      this.secondaryList.forEach((location) => {\n        const item = location.props.children.toUpperCase();\n        if (item.indexOf(filter) >= 0) {\n          this.filteredSecondaryList.push(location);\n        }\n      });\n    }\n    this.forceUpdate();\n  }\n\n  handleResetClick() {\n    const { onCloseSecondary } = this.props;\n    this.handleFilterReset();\n    onCloseSecondary();\n  }\n\n  onSecondaryListClick(event) {\n    const {\n      level,\n      setCountyIdx,\n      setPlaceIdx,\n      onDoubleClick,\n    } = this.props;\n\n    const tmpSecondaryIdx = event.target.attributes[0].value;\n\n    if (level === \"County\") {\n      setCountyIdx(tmpSecondaryIdx);\n    } else if (level === \"Place\") {\n      setPlaceIdx(tmpSecondaryIdx);\n    }\n\n    if (event.detail === 2) {\n      onDoubleClick();\n    }\n  }\n\n  onPrimaryListClick(event) {\n    const tmpStateIdx = event.target.attributes[0].value;\n    const {\n      level,\n      onOpenSecondary,\n      setStateIdx,\n      onDoubleClick,\n    } = this.props;\n\n    // set the stateIdx\n    setStateIdx(tmpStateIdx);\n\n    if (level !== \"State\") {\n      const { locations } = this.props;\n\n      // change the primaryList title\n      onOpenSecondary(locations[tmpStateIdx].StateName);\n      this.handleFilterReset();\n\n      // create secondaryList\n      this.secondaryList = [];\n      let tmpSecondary = null;\n      let itemID = 0;\n      if (level === \"County\") {\n        tmpSecondary = locations[tmpStateIdx].Counties;\n        tmpSecondary.forEach((secondary) => {\n          this.secondaryList.push(\n            <ListGroup.Item\n              action\n              eventKey={itemID}\n              key={itemID}\n              onClick={(e) => this.onSecondaryListClick(e)}\n            >\n              {secondary.CountyName}\n            </ListGroup.Item>,\n          );\n          itemID += 1;\n        });\n      } else if (level === \"Place\") {\n        tmpSecondary = locations[tmpStateIdx].Places;\n        tmpSecondary.forEach((secondary) => {\n          this.secondaryList.push(\n            <ListGroup.Item\n              action\n              eventKey={itemID}\n              key={itemID}\n              onClick={(e) => this.onSecondaryListClick(e)}\n            >\n              {secondary.PlaceName}\n            </ListGroup.Item>,\n          );\n          itemID += 1;\n        });\n      }\n      this.filteredSecondaryList = this.secondaryList;\n    } else {\n      if (event.detail === 2) {\n        onDoubleClick();\n      }\n    }\n  }\n\n  updateDimensions() {\n    const { level } = this.props;\n\n    const SelectorHeader = document.getElementById(\"SelectorAccordionHeader\").clientHeight;\n    const SelectionHeader = document.getElementById(\"SelectionAccordionHeader\").clientHeight;\n    const SelectionBody = document.getElementById(\"SelectionList\").clientHeight;\n\n    const targetHeight = (SelectionHeader + SelectionBody) - SelectorHeader;\n    document.getElementById(\"SelectorList\").style.height = `${targetHeight}px`;\n  }\n\n  render() {\n    // build the selectorTable\n    const {\n      activeList,\n      primaryTitle,\n      secondaryTitle,\n      activePrimaryItem,\n      activeSecondaryItem,\n    } = this.props;\n\n    console.log(\"rendering selector table\");\n\n    const resetStateButton = (\n      <Button id=\"ResetStateButton\" onClick={this.handleResetClick}>\n        Reset\n      </Button>\n    );\n\n    let listGroupItems;\n    let activeItem;\n    if (activeList === \"0\") {\n      listGroupItems = this.filteredPrimaryList;\n      activeItem = activePrimaryItem;\n    } else {\n      listGroupItems = this.filteredSecondaryList;\n      activeItem = activeSecondaryItem;\n    }\n\n    return (\n      <div id=\"SelectorTable\">\n        <Accordion defaultActiveKey=\"0\" activeKey=\"0\">\n          <Card>\n            <Card.Header id=\"SelectorAccordionHeader\">\n              <Accordion.Toggle as=\"span\" eventKey=\"0\">\n                <div id=\"SelectorHeader\">\n                  <div id=\"SelectorPrimaryHeader\">\n                    {primaryTitle}\n                    {activeList !== \"0\" ? resetStateButton : null}\n                  </div>\n                  {activeList !== \"0\" ? secondaryTitle : null}\n                  <FormControl\n                    ref={this.formFilter}\n                    onKeyUp={(e) => this.handleFilterChange(e)}\n                    placeholder=\"filter...\"\n                  />\n                </div>\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body id=\"SelectorList\">\n                <ListGroup variant=\"flush\" activeKey={activeItem}>\n                  {listGroupItems}\n                </ListGroup>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </div>\n    );\n  }\n}\n\nSelectorTable.propTypes = {\n  level: PropTypes.string,\n  activeList: PropTypes.string,\n  primaryTitle: PropTypes.string,\n  secondaryTitle: PropTypes.string,\n  onOpenSecondary: PropTypes.func,\n  onCloseSecondary: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  activePrimaryItem: PropTypes.string,\n  activeSecondaryItem: PropTypes.string,\n  setStateIdx: PropTypes.func,\n  setCountyIdx: PropTypes.func,\n  setPlaceIdx: PropTypes.func,\n  locations: PropTypes.arrayOf(\n    PropTypes.shape({\n      StateName: PropTypes.string,\n      StateID: PropTypes.string,\n      Counties: PropTypes.arrayOf(\n        PropTypes.shape({\n          CountyName: PropTypes.string,\n          CountyID: PropTypes.string,\n        }),\n      ),\n      Places: PropTypes.arrayOf(\n        PropTypes.shape({\n          PlaceName: PropTypes.string,\n          PlaceID: PropTypes.string,\n        }),\n      ),\n    }),\n  ),\n};\nSelectorTable.defaultProps = {\n  level: \"State\",\n  activeList: \"0\",\n  primaryTitle: \"Select a state\",\n  secondaryTitle: \"Select a state above\",\n  onOpenSecondary: null,\n  onCloseSecondary: null,\n  onDoubleClick: null,\n  activePrimaryItem: null,\n  activeSecondaryItem: null,\n  setStateIdx: null,\n  setCountyIdx: null,\n  setPlaceIdx: null,\n  locations: null,\n};\n\nexport default SelectorTable;\n","C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\LocationPage\\subcomponents\\LocationLevelButtons.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\SectionAccordion.js",[],"C:\\Users\\User\\Documents\\HLG\\c2x\\Census2Xlsx\\src\\components\\pages\\IndicatorPage\\subcomponents\\CheckBoxLabel.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":81,"column":23,"nodeType":"106","messageId":"107","endLine":82,"endColumn":1,"fix":"108"},{"ruleId":"104","severity":1,"message":"105","line":279,"column":122,"nodeType":"109","messageId":"107","endLine":280,"endColumn":1,"fix":"110"},{"ruleId":"111","severity":1,"message":"112","line":55,"column":13,"nodeType":"113","messageId":"114","endLine":55,"endColumn":25},{"ruleId":"111","severity":1,"message":"115","line":61,"column":7,"nodeType":"113","messageId":"114","endLine":61,"endColumn":15},{"ruleId":"111","severity":1,"message":"116","line":64,"column":7,"nodeType":"113","messageId":"114","endLine":64,"endColumn":22},{"ruleId":"92","replacedBy":"117"},{"ruleId":"94","replacedBy":"118"},{"ruleId":"96","replacedBy":"119"},{"ruleId":"98","replacedBy":"120"},{"ruleId":"100","replacedBy":"121"},{"ruleId":"102","replacedBy":"122"},{"ruleId":"111","severity":1,"message":"123","line":178,"column":13,"nodeType":"113","messageId":"114","endLine":178,"endColumn":18},"global-require",[],"lines-around-directive",["124"],"no-spaced-func",["125"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"semi","Missing semicolon.","ExpressionStatement","missingSemi",{"range":"126","text":"127"},"VariableDeclaration",{"range":"128","text":"127"},"no-unused-vars","'locationList' is assigned a value but never used.","Identifier","unusedVar","'fileName' is assigned a value but never used.","'invalidFilePath' is assigned a value but never used.",[],["124"],["125"],[],[],[],"'level' is assigned a value but never used.","padding-line-between-statements","func-call-spacing",[2810,2810],";",[7793,7793]]